{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP Sub-Agents for Enterprise Development","text":"<p>A comprehensive collection of specialized Claude Code agents with domain expert savants and hybrid workflow commands for building production-ready, enterprise-grade applications.</p>"},{"location":"#overview","title":"Overview","text":"<p>MCP Sub-Agents implements a two-tier agent architecture designed to provide deep technical expertise across multiple technology stacks. This system combines the broad knowledge of savant orchestrators with the focused expertise of specialist implementers.</p> <pre><code>graph TB\n    subgraph tier1[\"TIER 1: SAVANTS\"]\n        js[fullstack-js-savant&lt;br/&gt;JavaScript/TypeScript Master]\n        java[java-spring-savant&lt;br/&gt;Spring Ecosystem Master]\n    end\n\n    subgraph tier2[\"TIER 2: SPECIALISTS\"]\n        subgraph jsstack[JavaScript Stack]\n            jsspec1[fullstack-nextjs]\n            jsspec2[frontend-ui]\n            jsspec3[backend-api]\n        end\n\n        subgraph crosscut[Cross-Cutting]\n            cross1[code-reviewer]\n            cross2[qa-tester]\n            cross3[security]\n            cross4[performance]\n            cross5[deployment]\n            cross6[database]\n            cross7[monitoring]\n            cross8[architect]\n            cross9[tech-writer]\n        end\n    end\n\n    tier1 --&gt;|Delegates to| tier2</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#two-tier-architecture","title":"Two-Tier Architecture","text":"<p>Tier 1: Savant Agents</p> <p>Master orchestrators with broad, deep knowledge across entire technology ecosystems. Savants make architectural decisions, choose technologies, and coordinate specialist agents.</p> <ul> <li>fullstack-js-savant - JavaScript/TypeScript ecosystem master</li> <li>java-spring-savant - Spring ecosystem master</li> </ul> <p>Tier 2: Specialist Agents</p> <p>Deep domain experts focusing on specific frameworks, tools, and practices within a stack.</p> <ul> <li>JavaScript specialists for Next.js, UI, and APIs</li> <li>Cross-cutting specialists for security, testing, performance, and more</li> </ul>"},{"location":"#hybrid-workflow-commands","title":"Hybrid Workflow Commands","text":"<p>Structured slash commands that combine development workflow stages with technology expertise for guided, structured development:</p> <ul> <li><code>/mcp-design-architecture</code> - System architecture design</li> <li><code>/mcp-implement-fullstack</code> - End-to-end feature implementation</li> <li><code>/mcp-review-code</code> - Comprehensive code quality review</li> <li><code>/mcp-qa-e2e</code> - End-to-end testing with Playwright</li> <li><code>/mcp-deploy</code> - Production deployment with CI/CD</li> </ul> <p>View all workflow commands</p>"},{"location":"#why-use-mcp-sub-agents","title":"Why Use MCP Sub-Agents?","text":""},{"location":"#production-ready-expertise","title":"Production-Ready Expertise","text":"<p>Each agent provides comprehensive guidance for building enterprise-grade applications with modern best practices, security considerations, and performance optimizations.</p>"},{"location":"#flexible-usage","title":"Flexible Usage","text":"<p>Use savants for complex architectural decisions or specialists for focused implementation tasks. Mix and match based on your needs.</p>"},{"location":"#guided-workflows","title":"Guided Workflows","text":"<p>Workflow commands provide step-by-step guidance through design, implementation, review, QA, and deployment phases.</p>"},{"location":"#technology-specific","title":"Technology-Specific","text":"<p>Deep expertise in modern JavaScript/TypeScript stack including Next.js 15+, React Server Components, tRPC, Prisma, and more.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install all agents and workflow commands with one command:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/rcdelacruz/mcp-sub-agents/main/install.sh | bash\n</code></pre> <p>View detailed installation instructions</p>"},{"location":"#first-steps","title":"First Steps","text":"<ol> <li> <p>Use a savant for architecture decisions:     <pre><code>Use fullstack-js-savant to design a blog application architecture\n</code></pre></p> </li> <li> <p>Use specialists for implementation:     <pre><code>Use fullstack-nextjs to build the blog post page with Server Components\nUse frontend-ui to create the blog post form with shadcn/ui\n</code></pre></p> </li> <li> <p>Use workflow commands for guided development:     <pre><code>/mcp-design-nextjs\n/mcp-implement-fullstack\n/mcp-review-code\n</code></pre></p> </li> </ol> <p>View complete quick start guide</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The two-tier architecture provides both breadth and depth:</p> <pre><code>flowchart LR\n    User[Developer] --&gt; Choice{Task Type}\n\n    Choice --&gt;|Complex/Architecture| Savant[Savant Agent]\n    Choice --&gt;|Specific/Implementation| Specialist[Specialist Agent]\n\n    Savant --&gt; Design[Architectural Design]\n    Savant --&gt; Orchestrate[Orchestrate Specialists]\n\n    Specialist --&gt; Implement[Deep Implementation]\n\n    Design --&gt; Result[Complete Solution]\n    Orchestrate --&gt; Result\n    Implement --&gt; Result</code></pre>"},{"location":"#when-to-use-savants","title":"When to Use Savants","text":"<ul> <li>Architectural decisions and system design</li> <li>Technology stack selection</li> <li>Complex cross-cutting problems</li> <li>Full-stack feature orchestration</li> <li>High-level technical guidance</li> </ul>"},{"location":"#when-to-use-specialists","title":"When to Use Specialists","text":"<ul> <li>Framework-specific implementation</li> <li>UI component development</li> <li>API endpoint creation</li> <li>Database schema design</li> <li>Security audits</li> <li>Performance optimization</li> </ul> <p>Learn more about the architecture</p>"},{"location":"#technology-stack","title":"Technology Stack","text":"<p>MCP Sub-Agents provides expertise in modern JavaScript/TypeScript development:</p>"},{"location":"#frontend","title":"Frontend","text":"<ul> <li>Next.js 15+ with App Router</li> <li>React 18+ with Server Components</li> <li>TypeScript</li> <li>Tailwind CSS and shadcn/ui</li> <li>Radix UI primitives</li> </ul>"},{"location":"#backend","title":"Backend","text":"<ul> <li>Next.js API Routes and Server Actions</li> <li>tRPC for type-safe APIs</li> <li>NextAuth.js v5 for authentication</li> <li>Node.js and Express/NestJS</li> </ul>"},{"location":"#database","title":"Database","text":"<ul> <li>PostgreSQL with Prisma ORM</li> <li>Redis for caching</li> <li>Database optimization and migrations</li> </ul>"},{"location":"#testing-quality","title":"Testing &amp; Quality","text":"<ul> <li>Playwright for E2E testing</li> <li>Vitest for unit testing</li> <li>ESLint and Prettier</li> <li>Code review best practices</li> </ul>"},{"location":"#devops","title":"DevOps","text":"<ul> <li>Vercel deployment</li> <li>Docker containerization</li> <li>GitHub Actions CI/CD</li> <li>Monitoring with Sentry</li> </ul> <p>View complete tech stack reference</p>"},{"location":"#example-workflows","title":"Example Workflows","text":""},{"location":"#building-a-blog-feature","title":"Building a Blog Feature","text":"<pre><code># 1. Design the architecture\n/mcp-design-nextjs\n\n# 2. Implement end-to-end\n/mcp-implement-fullstack\n\n# 3. Review code quality\n/mcp-review-code\n\n# 4. Security audit\n/mcp-review-security\n\n# 5. Write tests\n/mcp-qa-e2e\n\n# 6. Deploy to production\n/mcp-deploy\n</code></pre>"},{"location":"#creating-an-authentication-system","title":"Creating an Authentication System","text":"<pre><code># Use savant for architecture\nUse fullstack-js-savant to design authentication with NextAuth.js\n\n# Use specialist for implementation\nUse backend-api to implement NextAuth.js with GitHub OAuth\n\n# Review security\n/mcp-review-security\n</code></pre> <p>View more workflow examples</p>"},{"location":"#agent-overview","title":"Agent Overview","text":""},{"location":"#savants","title":"Savants","text":"<ul> <li>fullstack-js-savant - Master of JavaScript/TypeScript ecosystem</li> <li>java-spring-savant - Master of Spring ecosystem</li> </ul> <p>Learn about savants</p>"},{"location":"#javascript-specialists","title":"JavaScript Specialists","text":"<ul> <li>fullstack-nextjs - Next.js 15+ with App Router and Server Components</li> <li>frontend-ui - shadcn/ui, Tailwind CSS, and accessibility</li> <li>backend-api - tRPC, REST APIs, and NextAuth.js authentication</li> </ul> <p>View JavaScript specialists</p>"},{"location":"#cross-cutting-specialists","title":"Cross-Cutting Specialists","text":"<ul> <li>code-reviewer - Code quality and best practices</li> <li>qa-tester - Playwright E2E and Vitest unit testing</li> <li>security - OWASP Top 10 and security best practices</li> <li>performance - Core Web Vitals optimization</li> <li>deployment - Vercel, Docker, and CI/CD</li> <li>database - PostgreSQL, Prisma, and optimization</li> <li>monitoring - Sentry, logging, and metrics</li> <li>architect - System design and scalability</li> <li>tech-writer - Technical documentation with MkDocs</li> </ul> <p>View cross-cutting specialists</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Installation Guide</li> <li>Quick Start</li> <li>Best Practices</li> <li>FAQ</li> <li>GitHub Issues</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! See our contributing guide for details on:</p> <ul> <li>Adding new agents</li> <li>Creating workflow commands</li> <li>Improving documentation</li> <li>Reporting issues</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - See LICENSE for details.</p> <p>Built for modern fullstack JavaScript developers who want to build production-ready, enterprise-grade applications with Next.js.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to MCP Sub-Agents! This guide will help you understand how to contribute effectively.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"contributing/#1-report-issues","title":"1. Report Issues","text":"<p>Found a bug or have a suggestion? Open an issue:</p> <ul> <li>GitHub Issues</li> </ul> <p>When reporting issues, include:</p> <ul> <li>Clear description of the problem</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Agent name and command used</li> <li>Error messages (if any)</li> <li>Environment details (OS, Node.js version)</li> </ul>"},{"location":"contributing/#2-improve-documentation","title":"2. Improve Documentation","text":"<p>Help improve the documentation:</p> <ul> <li>Fix typos and grammar</li> <li>Add examples</li> <li>Clarify explanations</li> <li>Add missing information</li> <li>Improve code examples</li> </ul>"},{"location":"contributing/#3-add-new-agents","title":"3. Add New Agents","text":"<p>Create new specialist or savant agents:</p> <ul> <li>Identify need for new agent</li> <li>Follow agent template</li> <li>Ensure comprehensive coverage</li> <li>Include examples</li> <li>Test thoroughly</li> </ul>"},{"location":"contributing/#4-create-workflow-commands","title":"4. Create Workflow Commands","text":"<p>Add new workflow commands:</p> <ul> <li>Identify common workflow patterns</li> <li>Create structured guidance</li> <li>Include checklists</li> <li>Provide time estimates</li> <li>Test with real scenarios</li> </ul>"},{"location":"contributing/#5-enhance-existing-agents","title":"5. Enhance Existing Agents","text":"<p>Improve existing agents:</p> <ul> <li>Add new patterns</li> <li>Update for latest versions</li> <li>Improve examples</li> <li>Clarify guidance</li> <li>Fix errors</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<pre><code># Fork on GitHub, then clone\ngit clone https://github.com/YOUR_USERNAME/mcp-sub-agents.git\ncd mcp-sub-agents\n</code></pre>"},{"location":"contributing/#2-create-a-branch","title":"2. Create a Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/your-bug-fix\n</code></pre>"},{"location":"contributing/#3-make-changes","title":"3. Make Changes","text":"<p>Edit the relevant files and test your changes.</p>"},{"location":"contributing/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"Description of changes\"\n</code></pre>"},{"location":"contributing/#5-push-and-create-pr","title":"5. Push and Create PR","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre> <p>Then create a Pull Request on GitHub.</p>"},{"location":"contributing/#adding-new-agents","title":"Adding New Agents","text":""},{"location":"contributing/#agent-template","title":"Agent Template","text":"<p>Create a new markdown file in the appropriate directory:</p> <pre><code>---\nname: agent-name\ndescription: Brief description of agent expertise and when to use it\ntools: Read, Write, Edit, Bash\nmodel: sonnet\n---\n\nYou are a [Agent Type] specializing in [Domain].\n\n## Core Expertise\n\n### Category 1\n- Technology A - Key features\n- Technology B - Key features\n\n### Category 2\n- Technology C - Key features\n\n## When to Use This Agent\n\nUse this agent when you need:\n- Use case 1\n- Use case 2\n- Use case 3\n\n## Best Practices\n\n- Best practice 1\n- Best practice 2\n\n## Code Examples\n\n### Example 1: [Description]\n\n```[language]\n// Code example\n</code></pre>"},{"location":"contributing/#example-2-description","title":"Example 2: [Description]","text":"<p>```[language] // Code example <pre><code>## Common Patterns\n\nPattern descriptions and examples.\n</code></pre></p>"},{"location":"contributing/#agent-placement","title":"Agent Placement","text":""},{"location":"contributing/#savant-agents","title":"Savant Agents","text":"<p>Place in <code>agents/savants/</code>:</p> <pre><code>agents/savants/savant-[stack]-name.md\n</code></pre> <p>Example: <code>agents/savants/savant-fullstack-js.md</code></p>"},{"location":"contributing/#stack-specific-specialists","title":"Stack-Specific Specialists","text":"<p>Place in appropriate stack directory:</p> <pre><code>agents/[stack]/specialist-name.md\n</code></pre> <p>Example: <code>agents/javascript/fullstack-nextjs.md</code></p>"},{"location":"contributing/#cross-cutting-specialists","title":"Cross-Cutting Specialists","text":"<p>Place in <code>agents/cross-cutting/</code>:</p> <pre><code>agents/cross-cutting/specialist-name.md\n</code></pre> <p>Example: <code>agents/cross-cutting/security.md</code></p>"},{"location":"contributing/#agent-naming-conventions","title":"Agent Naming Conventions","text":"<ul> <li>Savants: <code>savant-[stack]-[focus]</code> (e.g., <code>savant-fullstack-js</code>)</li> <li>Specialists: <code>[technology]-[focus]</code> (e.g., <code>fullstack-nextjs</code>)</li> <li>Cross-cutting: <code>[domain]</code> (e.g., <code>security</code>, <code>performance</code>)</li> </ul>"},{"location":"contributing/#agent-requirements","title":"Agent Requirements","text":"<p>New agents must include:</p> <ul> <li>Clear, specific name in frontmatter</li> <li>Comprehensive description</li> <li>Core expertise areas</li> <li>When to use guidance</li> <li>Best practices</li> <li>Code examples (at least 3)</li> <li>Common patterns</li> <li>800+ lines of quality guidance</li> </ul>"},{"location":"contributing/#adding-workflow-commands","title":"Adding Workflow Commands","text":""},{"location":"contributing/#command-template","title":"Command Template","text":"<p>Create a new markdown file in <code>.claude/commands/</code>:</p> <pre><code>---\ndescription: Brief description of what this workflow command does\n---\n\n# Workflow Command Title\n\nBrief overview of the command.\n\n## Purpose\n\nWhat this command helps you accomplish.\n\n## Workflow\n\nStep-by-step workflow:\n\n1. **Step 1 Name**\n    - Description\n    - What agent to use\n    - Expected output\n\n2. **Step 2 Name**\n    - Description\n    - What agent to use\n    - Expected output\n\n## Checklist\n\n- [ ] Requirement 1\n- [ ] Requirement 2\n- [ ] Requirement 3\n\n## Time Estimate\n\nEstimated time: [X-Y] minutes\n\n## Example Usage\n\nExample of running this command with expected results.\n\n## Next Steps\n\nWhat to do after completing this workflow.\n</code></pre>"},{"location":"contributing/#command-naming","title":"Command Naming","text":"<p>Use format: <code>mcp-[phase]-[technology]</code></p> <p>Examples:</p> <ul> <li><code>mcp-design-architecture</code></li> <li><code>mcp-implement-fullstack</code></li> <li><code>mcp-review-security</code></li> <li><code>mcp-qa-e2e</code></li> </ul>"},{"location":"contributing/#documentation-improvements","title":"Documentation Improvements","text":""},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Home page\n\u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u2514\u2500\u2500 quick-start.md\n\u251c\u2500\u2500 architecture/\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u2514\u2500\u2500 workflow-commands.md\n\u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 savants.md\n\u2502   \u251c\u2500\u2500 javascript-specialists.md\n\u2502   \u2514\u2500\u2500 cross-cutting-specialists.md\n\u251c\u2500\u2500 guides/\n\u2502   \u251c\u2500\u2500 workflows.md\n\u2502   \u2514\u2500\u2500 best-practices.md\n\u251c\u2500\u2500 reference/\n\u2502   \u2514\u2500\u2500 tech-stack.md\n\u251c\u2500\u2500 contributing.md\n\u2514\u2500\u2500 faq.md\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Add diagrams where helpful (Mermaid)</li> <li>Cross-reference related pages</li> <li>Keep formatting consistent</li> <li>Use admonitions for important notes</li> <li>Ensure mobile responsiveness</li> </ul>"},{"location":"contributing/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>Use Mermaid for architecture and flow diagrams:</p> <pre><code>```mermaid\ngraph TB\n    A[Start] --&gt; B[Process]\n    B --&gt; C[End]\n```\n</code></pre>"},{"location":"contributing/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"contributing/#typescript","title":"TypeScript","text":"<ul> <li>Use strict mode</li> <li>Provide complete type definitions</li> <li>Avoid <code>any</code> type</li> <li>Use proper interfaces</li> </ul>"},{"location":"contributing/#code-examples","title":"Code Examples","text":"<ul> <li>Production-ready code</li> <li>Include error handling</li> <li>Add comments for complex logic</li> <li>Follow best practices</li> <li>Test all examples</li> </ul>"},{"location":"contributing/#formatting","title":"Formatting","text":"<ul> <li>Use Prettier for formatting</li> <li>Follow existing code style</li> <li>Consistent indentation (2 spaces)</li> <li>Line length max 100 characters</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#test-your-changes","title":"Test Your Changes","text":"<p>Before submitting:</p> <ol> <li> <p>Agent Testing</p> <ul> <li>Test agent invocation</li> <li>Verify output quality</li> <li>Check examples work</li> <li>Test edge cases</li> </ul> </li> <li> <p>Command Testing</p> <ul> <li>Run through entire workflow</li> <li>Verify all steps work</li> <li>Check time estimates</li> <li>Test with real scenarios</li> </ul> </li> <li> <p>Documentation Testing</p> <ul> <li>Build documentation locally</li> <li>Check for broken links</li> <li>Verify code examples</li> <li>Test on mobile</li> </ul> </li> </ol>"},{"location":"contributing/#build-documentation-locally","title":"Build Documentation Locally","text":"<pre><code># Install MkDocs\npip install mkdocs mkdocs-material\n\n# Serve locally\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li> Test your changes thoroughly</li> <li> Update relevant documentation</li> <li> Add examples if applicable</li> <li> Check for typos and formatting</li> <li> Ensure consistent style</li> <li> Verify all links work</li> </ul>"},{"location":"contributing/#pr-description","title":"PR Description","text":"<p>Include in your PR:</p> <ul> <li>What: What changes were made</li> <li>Why: Reason for changes</li> <li>How: How to test the changes</li> <li>Related: Link to related issues</li> </ul>"},{"location":"contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] New agent\n- [ ] Workflow command\n- [ ] Documentation\n- [ ] Bug fix\n- [ ] Enhancement\n\n## Testing\nHow to test these changes\n\n## Checklist\n- [ ] Tested thoroughly\n- [ ] Documentation updated\n- [ ] Examples included\n- [ ] Follows style guide\n- [ ] No breaking changes\n</code></pre>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"contributing/#be-respectful","title":"Be Respectful","text":"<ul> <li>Treat everyone with respect</li> <li>Welcome newcomers</li> <li>Accept constructive criticism</li> <li>Focus on what's best for the community</li> </ul>"},{"location":"contributing/#be-collaborative","title":"Be Collaborative","text":"<ul> <li>Help others learn</li> <li>Share knowledge</li> <li>Give credit where due</li> <li>Support fellow contributors</li> </ul>"},{"location":"contributing/#be-professional","title":"Be Professional","text":"<ul> <li>Use welcoming language</li> <li>Avoid inflammatory comments</li> <li>Stay on topic</li> <li>Assume good intentions</li> </ul>"},{"location":"contributing/#review-process","title":"Review Process","text":""},{"location":"contributing/#what-to-expect","title":"What to Expect","text":"<ol> <li>Initial Review - Maintainer reviews within 1-3 days</li> <li>Feedback - Suggestions for improvements</li> <li>Iteration - Make requested changes</li> <li>Approval - PR approved and merged</li> <li>Release - Changes included in next release</li> </ol>"},{"location":"contributing/#review-criteria","title":"Review Criteria","text":"<p>PRs are evaluated on:</p> <ul> <li>Code quality and correctness</li> <li>Documentation completeness</li> <li>Test coverage</li> <li>Consistency with existing style</li> <li>Value added to the project</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> <li>Documentation</li> </ul>"},{"location":"contributing/#questions","title":"Questions","text":"<p>If you have questions:</p> <ol> <li>Check existing documentation</li> <li>Search closed issues</li> <li>Ask in GitHub Discussions</li> <li>Create a new issue</li> </ol>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors will be:</p> <ul> <li>Listed in CONTRIBUTORS.md</li> <li>Mentioned in release notes</li> <li>Acknowledged in documentation</li> </ul> <p>Thank you for contributing to MCP Sub-Agents!</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions about MCP Sub-Agents installation, usage, and troubleshooting.</p>"},{"location":"faq/#installation","title":"Installation","text":""},{"location":"faq/#q-where-should-i-install-the-agents","title":"Q: Where should I install the agents?","text":"<p>A: You have two options:</p> <ol> <li>Global installation (<code>~/.claude/agents/</code>) - Available across all projects</li> <li>Project-specific (<code>.claude/agents/</code>) - Only for specific project</li> </ol> <p>Most users prefer global installation for convenience.</p>"},{"location":"faq/#q-do-i-need-to-clone-the-repository","title":"Q: Do I need to clone the repository?","text":"<p>A: No! Use the one-line remote installation:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/rcdelacruz/mcp-sub-agents/main/install.sh | bash\n</code></pre> <p>The script handles everything automatically.</p>"},{"location":"faq/#q-how-do-i-verify-agents-are-installed-correctly","title":"Q: How do I verify agents are installed correctly?","text":"<p>A: Run the verification script:</p> <pre><code>cd mcp-sub-agents\n./verify-agents.sh\n</code></pre> <p>You should see 14 agents and 11 commands.</p>"},{"location":"faq/#q-can-i-use-both-global-and-project-specific-agents","title":"Q: Can I use both global and project-specific agents?","text":"<p>A: Yes, Claude Code searches both locations. Project-specific agents take precedence if there are naming conflicts.</p>"},{"location":"faq/#q-how-do-i-update-agents-to-the-latest-version","title":"Q: How do I update agents to the latest version?","text":"<p>A: For global installation:</p> <pre><code>cd ~/mcp-sub-agents\ngit pull origin main\ncp -r agents/* ~/.claude/agents/\ncp -r .claude/commands/* ~/.claude/commands/\n</code></pre> <p>For symlinked installation, just <code>git pull</code>.</p>"},{"location":"faq/#agent-discovery","title":"Agent Discovery","text":""},{"location":"faq/#q-claude-code-says-agent-not-found-whats-wrong","title":"Q: Claude Code says \"Agent not found\" - what's wrong?","text":"<p>A: Check these common issues:</p> <ol> <li> <p>Verify installation location: <pre><code>ls -R ~/.claude/agents/\n</code></pre></p> </li> <li> <p>Check agent name in frontmatter: <pre><code>grep \"^name:\" ~/.claude/agents/**/*.md\n</code></pre></p> </li> <li> <p>Restart Claude Code - Agents are loaded at startup</p> </li> <li> <p>Check frontmatter format: <pre><code>---\nname: agent-name    # Must be exactly this format\ndescription: ...\n---\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-do-subdirectories-work","title":"Q: Do subdirectories work?","text":"<p>A: Yes! Claude Code recursively searches all subdirectories in <code>~/.claude/agents/</code>. The organized structure (savants/, javascript/, cross-cutting/) is fully supported.</p>"},{"location":"faq/#q-how-does-claude-code-find-agents","title":"Q: How does Claude Code find agents?","text":"<p>A: By the <code>name:</code> field in the frontmatter, not the file path. The file can be anywhere in <code>~/.claude/agents/</code>.</p>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#q-when-should-i-use-a-savant-vs-a-specialist","title":"Q: When should I use a savant vs a specialist?","text":"<p>A:</p> <p>Use savants for: - Architecture decisions - Technology selection - Complex problems - Full-stack coordination</p> <p>Use specialists for: - Specific implementations - Framework details - Focused tasks - Domain expertise</p>"},{"location":"faq/#q-when-should-i-use-workflow-commands","title":"Q: When should I use workflow commands?","text":"<p>A: Use workflow commands when you want:</p> <ul> <li>Step-by-step guidance</li> <li>Comprehensive checklists</li> <li>Learning new patterns</li> <li>Ensuring completeness</li> <li>Structured development</li> </ul> <p>Use direct agent invocation for quick, specific tasks.</p>"},{"location":"faq/#q-can-i-chain-multiple-agents","title":"Q: Can I chain multiple agents?","text":"<p>A: Yes! This is recommended for complex tasks:</p> <pre><code># 1. Design\nUse architect to design system\n\n# 2. Database\nUse database to create schema\n\n# 3. API\nUse backend-api to implement API\n\n# 4. UI\nUse frontend-ui to create components\n\n# 5. Review\nUse code-reviewer to review code\n</code></pre>"},{"location":"faq/#q-how-specific-should-my-requests-be","title":"Q: How specific should my requests be?","text":"<p>A: Be as specific as possible:</p> <pre><code># Good\nUse frontend-ui to create a multi-step wizard form with validation, progress indicator, and ability to navigate between steps\n\n# Less effective\nUse frontend-ui to create a form\n</code></pre>"},{"location":"faq/#workflow-commands","title":"Workflow Commands","text":""},{"location":"faq/#q-workflow-commands-dont-work-why","title":"Q: Workflow commands don't work - why?","text":"<p>A: Check:</p> <ol> <li> <p>Commands directory exists: <pre><code>ls ~/.claude/commands/\n</code></pre></p> </li> <li> <p>Files have .md extension: <pre><code>ls ~/.claude/commands/*.md\n</code></pre></p> </li> <li> <p>Restart Claude Code - Commands loaded at startup</p> </li> </ol>"},{"location":"faq/#q-can-i-create-custom-workflow-commands","title":"Q: Can I create custom workflow commands?","text":"<p>A: Yes! Add markdown files to <code>.claude/commands/</code>:</p> <pre><code>---\ndescription: Your custom workflow\n---\n\n# Custom Workflow\n\nYour guidance here...\n</code></pre>"},{"location":"faq/#q-whats-the-difference-between-mcp-implement-fullstack-and-mcp-implement-frontend","title":"Q: What's the difference between <code>/mcp-implement-fullstack</code> and <code>/mcp-implement-frontend</code>?","text":"<p>A:</p> <ul> <li><code>/mcp-implement-fullstack</code> - Complete feature (database \u2192 API \u2192 UI)</li> <li><code>/mcp-implement-frontend</code> - UI components only</li> </ul> <p>Choose based on scope of work.</p>"},{"location":"faq/#agents","title":"Agents","text":""},{"location":"faq/#q-which-agent-should-i-use-for-nextjs","title":"Q: Which agent should I use for Next.js?","text":"<p>A: Depends on the task:</p> <ul> <li>fullstack-nextjs - Server Components, routing, data fetching</li> <li>frontend-ui - UI components, forms, layouts</li> <li>backend-api - APIs, authentication</li> <li>fullstack-js-savant - Architecture, complex decisions</li> </ul>"},{"location":"faq/#q-can-i-use-multiple-agents-for-one-task","title":"Q: Can I use multiple agents for one task?","text":"<p>A: Yes! Combine agents:</p> <pre><code>Use database to create schema\nUse backend-api to create API\nUse fullstack-nextjs to build pages\nUse frontend-ui to create forms\n</code></pre>"},{"location":"faq/#q-whats-the-difference-between-fullstack-nextjs-and-fullstack-js-savant","title":"Q: What's the difference between fullstack-nextjs and fullstack-js-savant?","text":"<p>A:</p> <ul> <li>fullstack-nextjs - Specialist in Next.js 15+ implementation</li> <li>fullstack-js-savant - Master orchestrator for entire JS ecosystem, makes architectural decisions</li> </ul> <p>Use savant for decisions, specialist for implementation.</p>"},{"location":"faq/#technology-stack","title":"Technology Stack","text":""},{"location":"faq/#q-what-version-of-nextjs-is-supported","title":"Q: What version of Next.js is supported?","text":"<p>A: Next.js 15+ with App Router. The agents focus on modern patterns with Server Components and Server Actions.</p>"},{"location":"faq/#q-can-i-use-these-agents-with-pages-router","title":"Q: Can I use these agents with Pages Router?","text":"<p>A: The agents are optimized for App Router. For Pages Router, you'll need to adapt the guidance.</p>"},{"location":"faq/#q-is-typescript-required","title":"Q: Is TypeScript required?","text":"<p>A: While not strictly required, all agents assume TypeScript usage and provide TypeScript examples. JavaScript users can adapt the patterns.</p>"},{"location":"faq/#q-what-about-python-java-or-other-languages","title":"Q: What about Python, Java, or other languages?","text":"<p>A: Currently focused on JavaScript/TypeScript. Java Spring savant is available. More language savants can be added (see contributing guide).</p>"},{"location":"faq/#best-practices","title":"Best Practices","text":""},{"location":"faq/#q-should-i-review-code-after-every-implementation","title":"Q: Should I review code after every implementation?","text":"<p>A: Yes! Use <code>/mcp-review-code</code> proactively:</p> <pre><code>/mcp-implement-fullstack\n/mcp-review-code    # Review immediately\n</code></pre>"},{"location":"faq/#q-how-often-should-i-run-security-audits","title":"Q: How often should I run security audits?","text":"<p>A: Recommended schedule:</p> <ul> <li>Before production deployment (always)</li> <li>Monthly during active development</li> <li>After authentication changes</li> <li>When handling sensitive data</li> </ul>"},{"location":"faq/#q-when-should-i-optimize-performance","title":"Q: When should I optimize performance?","text":"<p>A: Follow this approach:</p> <ol> <li>Build feature first</li> <li>Run <code>/mcp-review-performance</code> to measure</li> <li>Optimize identified issues</li> <li>Re-measure to verify improvements</li> </ol> <p>Don't optimize prematurely.</p>"},{"location":"faq/#q-should-i-write-tests-as-i-code-or-after","title":"Q: Should I write tests as I code or after?","text":"<p>A: Write tests alongside code:</p> <pre><code>/mcp-implement-fullstack   # Build feature\n/mcp-qa-e2e               # Write tests immediately\n</code></pre> <p>This prevents bugs and ensures testability.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#q-agents-give-outdated-advice","title":"Q: Agents give outdated advice","text":"<p>A: Update to latest version:</p> <pre><code>cd ~/mcp-sub-agents\ngit pull origin main\n# Copy updated agents\n</code></pre>"},{"location":"faq/#q-workflow-command-gives-error","title":"Q: Workflow command gives error","text":"<p>A: Common issues:</p> <ol> <li>Command file missing or corrupted</li> <li>Frontmatter malformed</li> <li>Referenced agent not installed</li> <li>Need to restart Claude Code</li> </ol>"},{"location":"faq/#q-agent-response-seems-generic","title":"Q: Agent response seems generic","text":"<p>A: Provide more specific context:</p> <pre><code># Instead of\nUse frontend-ui to create a form\n\n# Try\nUse frontend-ui to create a multi-step registration form with email, password, and profile fields. Include Zod validation and error display.\n</code></pre>"},{"location":"faq/#q-different-agents-give-conflicting-advice","title":"Q: Different agents give conflicting advice","text":"<p>A: Use savant to clarify:</p> <pre><code>Use fullstack-js-savant to explain the tradeoffs between [approach A] and [approach B] for my use case\n</code></pre>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#q-are-agents-slow-to-respond","title":"Q: Are agents slow to respond?","text":"<p>A: Response time depends on:</p> <ul> <li>Complexity of request</li> <li>Agent being used (savants do more analysis)</li> <li>Claude API performance</li> </ul> <p>For faster responses, be specific about what you need.</p>"},{"location":"faq/#q-can-i-run-multiple-agents-in-parallel","title":"Q: Can I run multiple agents in parallel?","text":"<p>A: Yes, you can invoke multiple agents sequentially. They don't run in parallel but you can chain them efficiently.</p>"},{"location":"faq/#platform-specific","title":"Platform-Specific","text":""},{"location":"faq/#q-does-this-work-on-windows","title":"Q: Does this work on Windows?","text":"<p>A: Yes, but use PowerShell:</p> <pre><code>Copy-Item -Recurse agents\\* $env:USERPROFILE\\.claude\\agents\\\nCopy-Item -Recurse .claude\\commands\\* $env:USERPROFILE\\.claude\\commands\\\n</code></pre>"},{"location":"faq/#q-any-issues-on-macos","title":"Q: Any issues on macOS?","text":"<p>A: No known issues. Installation script works perfectly on macOS.</p>"},{"location":"faq/#q-linux-support","title":"Q: Linux support?","text":"<p>A: Fully supported. Same as macOS installation.</p>"},{"location":"faq/#team-usage","title":"Team Usage","text":""},{"location":"faq/#q-how-do-teams-use-mcp-sub-agents","title":"Q: How do teams use MCP Sub-Agents?","text":"<p>A: Use project-specific installation:</p> <pre><code># In project repo\nmkdir -p .claude/agents .claude/commands\ncp -r agents/* .claude/agents/\n</code></pre> <p>Commit <code>.claude/</code> to version control for team consistency.</p>"},{"location":"faq/#q-can-we-customize-agents-for-our-team","title":"Q: Can we customize agents for our team?","text":"<p>A: Yes! Fork the repository and modify agents to match your:</p> <ul> <li>Tech stack</li> <li>Coding standards</li> <li>Best practices</li> <li>Company policies</li> </ul>"},{"location":"faq/#q-how-to-ensure-consistency-across-team","title":"Q: How to ensure consistency across team?","text":"<p>A: Use workflow commands:</p> <pre><code># Everyone uses same workflows\n/mcp-implement-fullstack\n/mcp-review-code\n</code></pre> <p>This ensures consistent patterns.</p>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#q-can-i-create-my-own-agents","title":"Q: Can I create my own agents?","text":"<p>A: Yes! See the Contributing Guide for agent template and guidelines.</p>"},{"location":"faq/#q-can-agents-modify-multiple-files","title":"Q: Can agents modify multiple files?","text":"<p>A: Yes, agents can read, write, and edit multiple files as needed for implementation.</p>"},{"location":"faq/#q-do-agents-remember-context-between-invocations","title":"Q: Do agents remember context between invocations?","text":"<p>A: Within a single conversation, yes. Context is maintained throughout the session.</p>"},{"location":"faq/#q-can-i-use-agents-for-non-nextjs-projects","title":"Q: Can I use agents for non-Next.js projects?","text":"<p>A: Yes! Use:</p> <ul> <li>fullstack-js-savant for JavaScript/TypeScript projects</li> <li>Cross-cutting specialists (security, performance, etc.) work with any stack</li> <li>More framework-specific agents can be added</li> </ul>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#q-where-can-i-get-help","title":"Q: Where can I get help?","text":"<p>A: Multiple options:</p> <ol> <li>Documentation</li> <li>GitHub Issues</li> <li>GitHub Discussions</li> <li>Read existing agent documentation in <code>agents/</code> directories</li> </ol>"},{"location":"faq/#q-how-do-i-report-a-bug","title":"Q: How do I report a bug?","text":"<p>A: Open a GitHub Issue with:</p> <ul> <li>Clear description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Agent/command used</li> <li>Environment details</li> </ul>"},{"location":"faq/#q-can-i-request-new-features","title":"Q: Can I request new features?","text":"<p>A: Yes! Open a GitHub Issue with:</p> <ul> <li>Feature description</li> <li>Use case explanation</li> <li>Why it's valuable</li> <li>Proposed implementation (optional)</li> </ul>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#q-how-can-i-contribute","title":"Q: How can I contribute?","text":"<p>A: Multiple ways:</p> <ul> <li>Report bugs and issues</li> <li>Improve documentation</li> <li>Add new agents</li> <li>Create workflow commands</li> <li>Enhance existing agents</li> <li>Share feedback</li> </ul> <p>See Contributing Guide for details.</p>"},{"location":"faq/#q-what-makes-a-good-agent","title":"Q: What makes a good agent?","text":"<p>A: Good agents have:</p> <ul> <li>Clear, specific focus</li> <li>Comprehensive guidance (800+ lines)</li> <li>Production-ready code examples</li> <li>Best practices</li> <li>When to use guidance</li> <li>Common patterns</li> <li>Well-structured organization</li> </ul>"},{"location":"faq/#still-have-questions","title":"Still Have Questions?","text":"<p>If your question isn't answered here:</p> <ol> <li>Check the documentation</li> <li>Search closed issues</li> <li>Ask in GitHub Discussions</li> <li>Create a new issue</li> </ol>"},{"location":"agents/cross-cutting-specialists/","title":"Cross-Cutting Specialists","text":"<p>Cross-cutting specialists are domain experts that work across all technology stacks. They focus on specific concerns like security, testing, performance, and deployment that apply regardless of the frontend or backend framework being used.</p>"},{"location":"agents/cross-cutting-specialists/#overview","title":"Overview","text":"<p>Cross-cutting specialists include:</p> <ul> <li>code-reviewer - Code quality and best practices</li> <li>qa-tester - Testing strategies and implementation</li> <li>security - Security audits and OWASP compliance</li> <li>performance - Optimization and Core Web Vitals</li> <li>deployment - CI/CD and infrastructure</li> <li>database - Schema design and query optimization</li> <li>monitoring - Observability and error tracking</li> <li>architect - System design and scalability</li> <li>tech-writer - Technical documentation</li> </ul>"},{"location":"agents/cross-cutting-specialists/#code-reviewer","title":"code-reviewer","text":"<p>Name: <code>code-reviewer</code></p> <p>Description: Expert in code quality, best practices, and comprehensive code review.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas","title":"Expertise Areas","text":"<ul> <li>TypeScript type safety and best practices</li> <li>React and Next.js patterns</li> <li>Server vs Client Component usage</li> <li>Error handling and resilience</li> <li>Security vulnerability detection</li> <li>Performance anti-patterns</li> <li>Code smell identification</li> <li>Refactoring suggestions</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use","title":"When to Use","text":"<ul> <li>After implementing features</li> <li>Before merging pull requests</li> <li>Ensuring code quality</li> <li>Learning best practices</li> <li>Identifying technical debt</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example","title":"Usage Example","text":"<pre><code>Use code-reviewer to review my blog post implementation for best practices and potential issues\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#qa-tester","title":"qa-tester","text":"<p>Name: <code>qa-tester</code></p> <p>Description: Expert in comprehensive testing strategies with Playwright E2E and Vitest unit testing.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_1","title":"Expertise Areas","text":"<ul> <li>Playwright E2E Testing - Browser automation, cross-browser testing</li> <li>Vitest Unit Testing - Fast unit tests with excellent DX</li> <li>React Testing Library - Component testing</li> <li>Server Actions Testing - Testing Next.js Server Actions</li> <li>Test Coverage - Ensuring comprehensive coverage</li> <li>Page Object Model - Maintainable test architecture</li> <li>API Testing - Testing REST and tRPC endpoints</li> <li>Accessibility Testing - Automated a11y checks</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_1","title":"When to Use","text":"<ul> <li>Writing end-to-end tests</li> <li>Creating unit tests</li> <li>Testing critical user flows</li> <li>Improving test coverage</li> <li>Setting up testing infrastructure</li> <li>Debugging test failures</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_1","title":"Usage Example","text":"<pre><code>Use qa-tester to write Playwright E2E tests for the user authentication flow including login, signup, and password reset\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#security","title":"security","text":"<p>Name: <code>security</code></p> <p>Description: Expert in application security and OWASP Top 10 compliance.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_2","title":"Expertise Areas","text":"<ul> <li>OWASP Top 10 - Complete coverage of top security risks</li> <li>Authentication &amp; Authorization - Secure implementation</li> <li>Input Validation - SQL injection, XSS prevention</li> <li>Encryption - Data at rest and in transit</li> <li>Security Headers - CSP, HSTS, X-Frame-Options</li> <li>Rate Limiting - DDoS protection</li> <li>Audit Logging - Security event tracking</li> <li>Dependency Scanning - Vulnerable package detection</li> <li>Multi-Factor Authentication - 2FA/MFA implementation</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_2","title":"When to Use","text":"<ul> <li>Before production deployment</li> <li>After authentication changes</li> <li>Regular security audits</li> <li>Compliance requirements</li> <li>Investigating security incidents</li> <li>Hardening applications</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_2","title":"Usage Example","text":"<pre><code>Use security to perform a comprehensive security audit of my application focusing on authentication and data protection\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#performance","title":"performance","text":"<p>Name: <code>performance</code></p> <p>Description: Expert in web performance optimization and Core Web Vitals.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_3","title":"Expertise Areas","text":"<ul> <li>Core Web Vitals - LCP, FID/INP, CLS optimization</li> <li>Bundle Size - JavaScript and CSS optimization</li> <li>Code Splitting - Dynamic imports and lazy loading</li> <li>Image Optimization - next/image best practices</li> <li>Font Optimization - next/font usage</li> <li>Caching Strategies - Browser, CDN, server caching</li> <li>Database Optimization - Query optimization, indexing</li> <li>Streaming &amp; Suspense - Progressive rendering</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_3","title":"When to Use","text":"<ul> <li>Improving page load times</li> <li>Reducing bundle size</li> <li>Optimizing Core Web Vitals</li> <li>Addressing performance issues</li> <li>Pre-launch optimization</li> <li>Regular performance audits</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_3","title":"Usage Example","text":"<pre><code>Use performance to analyze my application and provide recommendations for improving Core Web Vitals scores\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#deployment","title":"deployment","text":"<p>Name: <code>deployment</code></p> <p>Description: Expert in deployment strategies, CI/CD pipelines, and infrastructure.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_4","title":"Expertise Areas","text":"<ul> <li>Vercel Deployment - Configuration and optimization</li> <li>Docker - Containerization and multi-stage builds</li> <li>Kubernetes - Orchestration and scaling</li> <li>GitHub Actions - CI/CD workflows</li> <li>Environment Management - Secrets and configuration</li> <li>Database Migrations - Zero-downtime migrations</li> <li>Blue-Green Deployments - Rollback strategies</li> <li>Health Checks - Monitoring deployment status</li> <li>CDN Configuration - Edge caching and distribution</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_4","title":"When to Use","text":"<ul> <li>Deploying to production</li> <li>Setting up CI/CD pipelines</li> <li>Configuring infrastructure</li> <li>Implementing deployment strategies</li> <li>Troubleshooting deployment issues</li> <li>Automating releases</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_4","title":"Usage Example","text":"<pre><code>Use deployment to set up a complete CI/CD pipeline with GitHub Actions for deploying my Next.js app to Vercel\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#database","title":"database","text":"<p>Name: <code>database</code></p> <p>Description: Expert in PostgreSQL, Prisma ORM, and database optimization.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_5","title":"Expertise Areas","text":"<ul> <li>Prisma Schema Design - Models, relations, enums</li> <li>Migrations - Versioning and management</li> <li>Query Optimization - Efficient queries</li> <li>Indexing - Performance indexes</li> <li>Transactions - ACID compliance</li> <li>N+1 Prevention - Query batching</li> <li>Connection Pooling - Resource management</li> <li>Full-Text Search - PostgreSQL search features</li> <li>Data Modeling - Normalization and design patterns</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_5","title":"When to Use","text":"<ul> <li>Designing database schemas</li> <li>Creating migrations</li> <li>Optimizing queries</li> <li>Preventing N+1 problems</li> <li>Database performance tuning</li> <li>Data modeling decisions</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_5","title":"Usage Example","text":"<pre><code>Use database to design a Prisma schema for a multi-tenant SaaS application with users, organizations, and projects\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#monitoring","title":"monitoring","text":"<p>Name: <code>monitoring</code></p> <p>Description: Expert in observability, error tracking, and application monitoring.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_6","title":"Expertise Areas","text":"<ul> <li>Sentry - Error tracking and alerting</li> <li>OpenTelemetry - Distributed tracing</li> <li>Structured Logging - Pino, Winston</li> <li>Metrics &amp; Dashboards - Application metrics</li> <li>Uptime Monitoring - Health checks</li> <li>APM - Application performance monitoring</li> <li>Real User Monitoring - RUM metrics</li> <li>Alerting - Notification strategies</li> <li>Log Aggregation - Centralized logging</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_6","title":"When to Use","text":"<ul> <li>Setting up error tracking</li> <li>Implementing logging</li> <li>Creating dashboards</li> <li>Configuring alerts</li> <li>Troubleshooting issues</li> <li>Understanding user experience</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_6","title":"Usage Example","text":"<pre><code>Use monitoring to set up comprehensive monitoring with Sentry for error tracking and OpenTelemetry for distributed tracing\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#architect","title":"architect","text":"<p>Name: <code>architect</code></p> <p>Description: Expert in system architecture, design patterns, and scalability.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_7","title":"Expertise Areas","text":"<ul> <li>Architecture Patterns - Monolith, microservices, serverless</li> <li>Design Patterns - Repository, Service, Factory patterns</li> <li>Scalability - Horizontal and vertical scaling</li> <li>Event-Driven - Event sourcing, CQRS</li> <li>Caching Strategies - Multi-layer caching</li> <li>Database Scaling - Read replicas, sharding</li> <li>API Design - REST, tRPC, GraphQL</li> <li>Resilience Patterns - Circuit breaker, retry logic</li> <li>Future-Proofing - Extensibility and maintainability</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_7","title":"When to Use","text":"<ul> <li>Designing system architecture</li> <li>Planning scalability</li> <li>Making architectural decisions</li> <li>Refactoring architecture</li> <li>Solving scaling challenges</li> <li>Technology selection</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_7","title":"Usage Example","text":"<pre><code>Use architect to design a scalable architecture for a real-time collaboration platform that needs to support 100,000 concurrent users\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#tech-writer","title":"tech-writer","text":"<p>Name: <code>tech-writer</code></p> <p>Description: Expert in technical documentation with MkDocs Material.</p>"},{"location":"agents/cross-cutting-specialists/#expertise-areas_8","title":"Expertise Areas","text":"<ul> <li>MkDocs Material - Documentation sites</li> <li>Professional Styling - Custom CSS and themes</li> <li>API Documentation - REST and tRPC endpoints</li> <li>User Guides - Getting started, tutorials</li> <li>README Files - Project documentation</li> <li>Architecture Docs - System diagrams with Mermaid</li> <li>Code Documentation - Inline and API docs</li> <li>Deployment Docs - Setup and configuration</li> <li>Accessibility - WCAG-compliant documentation</li> </ul>"},{"location":"agents/cross-cutting-specialists/#when-to-use_8","title":"When to Use","text":"<ul> <li>Creating project documentation</li> <li>Writing API references</li> <li>Building documentation sites</li> <li>Documenting architecture</li> <li>Creating user guides</li> <li>Generating README files</li> </ul>"},{"location":"agents/cross-cutting-specialists/#usage-example_8","title":"Usage Example","text":"<pre><code>Use tech-writer to create comprehensive documentation for my API including getting started guide, endpoint reference, and deployment instructions\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#best-practices","title":"Best Practices","text":""},{"location":"agents/cross-cutting-specialists/#1-use-cross-cutting-specialists-proactively","title":"1. Use Cross-Cutting Specialists Proactively","text":"<p>Don't wait until issues arise:</p> <pre><code># Regular security audits\n/mcp-review-security\n\n# Continuous performance monitoring\n/mcp-review-performance\n\n# Ongoing code quality checks\n/mcp-review-code\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#2-combine-multiple-specialists","title":"2. Combine Multiple Specialists","text":"<p>For comprehensive quality assurance:</p> <pre><code># After implementation\nUse code-reviewer to review code quality\nUse security to audit security\nUse performance to check performance\nUse qa-tester to write tests\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#3-leverage-for-learning","title":"3. Leverage for Learning","text":"<p>Ask specialists about best practices:</p> <pre><code>Use security to explain OWASP Top 10 vulnerabilities and how to prevent them in Next.js\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#4-integrate-into-workflow","title":"4. Integrate into Workflow","text":"<p>Make specialists part of your regular workflow:</p> <pre><code>flowchart LR\n    Implement[Implementation] --&gt; CodeReview[code-reviewer]\n    CodeReview --&gt; Security[security]\n    Security --&gt; Performance[performance]\n    Performance --&gt; Testing[qa-tester]\n    Testing --&gt; Deploy[deployment]\n    Deploy --&gt; Monitor[monitoring]</code></pre>"},{"location":"agents/cross-cutting-specialists/#specialist-coordination","title":"Specialist Coordination","text":"<p>Cross-cutting specialists often work together:</p> <pre><code>sequenceDiagram\n    participant Dev\n    participant Code as code-reviewer\n    participant Sec as security\n    participant Perf as performance\n    participant QA as qa-tester\n\n    Dev-&gt;&gt;Code: Review implementation\n    Code-&gt;&gt;Dev: Quality issues found\n\n    Dev-&gt;&gt;Sec: Security audit\n    Sec-&gt;&gt;Dev: Vulnerabilities found\n\n    Dev-&gt;&gt;Dev: Fix issues\n\n    Dev-&gt;&gt;Perf: Performance check\n    Perf-&gt;&gt;Dev: Optimization suggestions\n\n    Dev-&gt;&gt;QA: Write tests\n    QA-&gt;&gt;Dev: Test coverage complete</code></pre>"},{"location":"agents/cross-cutting-specialists/#when-to-use-which-specialist","title":"When to Use Which Specialist","text":""},{"location":"agents/cross-cutting-specialists/#before-deployment-checklist","title":"Before Deployment Checklist","text":"<pre><code># 1. Code quality\nUse code-reviewer to review all code\n\n# 2. Security\nUse security to perform security audit\n\n# 3. Performance\nUse performance to check Core Web Vitals\n\n# 4. Testing\nUse qa-tester to ensure test coverage\n\n# 5. Documentation\nUse tech-writer to verify documentation\n\n# 6. Deployment\nUse deployment to configure CI/CD\n\n# 7. Monitoring\nUse monitoring to set up error tracking\n</code></pre>"},{"location":"agents/cross-cutting-specialists/#during-development","title":"During Development","text":"<ul> <li>code-reviewer - After each feature</li> <li>qa-tester - Alongside implementation</li> <li>database - For schema changes</li> <li>performance - For optimization needs</li> </ul>"},{"location":"agents/cross-cutting-specialists/#periodic-reviews","title":"Periodic Reviews","text":"<ul> <li>security - Monthly audits</li> <li>performance - Weekly checks</li> <li>architect - Quarterly reviews</li> <li>monitoring - Dashboard reviews</li> </ul>"},{"location":"agents/cross-cutting-specialists/#summary","title":"Summary","text":"<p>Cross-cutting specialists provide:</p> <ul> <li>Universal Expertise - Works with all stacks</li> <li>Quality Assurance - Security, performance, testing</li> <li>Best Practices - Industry standards</li> <li>Specialized Knowledge - Deep domain expertise</li> </ul>"},{"location":"agents/cross-cutting-specialists/#next-steps","title":"Next Steps","text":"<ul> <li>View savant agents</li> <li>View JavaScript specialists</li> <li>Learn workflow commands</li> <li>See best practices</li> </ul>"},{"location":"agents/javascript-specialists/","title":"JavaScript Specialists","text":"<p>JavaScript specialists are deep domain experts focusing on specific frameworks and tools within the JavaScript/TypeScript ecosystem. They provide detailed implementations, best practices, and production-ready code.</p>"},{"location":"agents/javascript-specialists/#overview","title":"Overview","text":"<p>The JavaScript specialist agents cover:</p> <ul> <li>fullstack-nextjs - Next.js 15+ with App Router and Server Components</li> <li>frontend-ui - shadcn/ui, Tailwind CSS, and accessibility</li> <li>backend-api - tRPC, REST APIs, and NextAuth.js authentication</li> </ul>"},{"location":"agents/javascript-specialists/#fullstack-nextjs","title":"fullstack-nextjs","text":"<p>Name: <code>fullstack-nextjs</code></p> <p>Description: Expert in Next.js 15+ development with App Router, Server Components, and modern full-stack patterns.</p>"},{"location":"agents/javascript-specialists/#core-expertise","title":"Core Expertise","text":"<ul> <li>Next.js 15 App Router - File-based routing, layouts, route groups</li> <li>React Server Components - Server-first data fetching</li> <li>Server Actions - Form handling and mutations</li> <li>Data Fetching - Parallel fetching, streaming, caching</li> <li>Metadata &amp; SEO - Static and dynamic metadata</li> <li>Route Handlers - API endpoints</li> <li>Middleware - Authentication, rate limiting</li> <li>Streaming &amp; Suspense - Progressive rendering</li> <li>Error Handling - Error boundaries, not-found pages</li> </ul>"},{"location":"agents/javascript-specialists/#when-to-use","title":"When to Use","text":"<ul> <li>Building Next.js applications with App Router</li> <li>Implementing Server Components and Server Actions</li> <li>Setting up routing, layouts, and navigation</li> <li>Data fetching and caching strategies</li> <li>Building full-stack features with Next.js</li> <li>Configuring metadata and SEO</li> </ul>"},{"location":"agents/javascript-specialists/#usage-examples","title":"Usage Examples","text":"<p>Server Component Page: <pre><code>Use fullstack-nextjs to create a blog post listing page with Server Components and pagination\n</code></pre></p> <p>Server Actions: <pre><code>Use fullstack-nextjs to implement a create post form with Server Actions and validation\n</code></pre></p> <p>Streaming: <pre><code>Use fullstack-nextjs to add streaming and Suspense to the dashboard page\n</code></pre></p>"},{"location":"agents/javascript-specialists/#code-example","title":"Code Example","text":"<p>Server Component with data fetching:</p> <pre><code>// app/posts/page.tsx\nimport { db } from '@/lib/db'\nimport { PostCard } from '@/components/post-card'\n\nexport default async function PostsPage() {\n  const posts = await db.post.findMany({\n    orderBy: { createdAt: 'desc' },\n    include: { author: true },\n  })\n\n  return (\n    &lt;div className=\"container py-8\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-8\"&gt;Blog Posts&lt;/h1&gt;\n      &lt;div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\"&gt;\n        {posts.map((post) =&gt; (\n          &lt;PostCard key={post.id} post={post} /&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"agents/javascript-specialists/#frontend-ui","title":"frontend-ui","text":"<p>Name: <code>frontend-ui</code></p> <p>Description: Expert in modern UI/UX with shadcn/ui, Tailwind CSS, and accessibility best practices.</p>"},{"location":"agents/javascript-specialists/#core-expertise_1","title":"Core Expertise","text":"<ul> <li>shadcn/ui - Component installation and customization</li> <li>Tailwind CSS - Responsive design, utility classes</li> <li>Radix UI - Accessible primitives</li> <li>React Hook Form - Form handling with validation</li> <li>Zod - Schema validation</li> <li>TanStack Table - Data tables</li> <li>Accessibility - WCAG AA compliance, ARIA</li> <li>Dark Mode - Theme switching</li> <li>Framer Motion - Animations</li> <li>Responsive Design - Mobile-first approach</li> </ul>"},{"location":"agents/javascript-specialists/#when-to-use_1","title":"When to Use","text":"<ul> <li>Building UI components and layouts</li> <li>Creating forms with validation</li> <li>Ensuring accessibility</li> <li>Implementing responsive design</li> <li>Adding animations and interactions</li> <li>Setting up design systems</li> </ul>"},{"location":"agents/javascript-specialists/#usage-examples_1","title":"Usage Examples","text":"<p>Form with Validation: <pre><code>Use frontend-ui to create a signup form with email, password, and name fields using shadcn/ui and Zod validation\n</code></pre></p> <p>Data Table: <pre><code>Use frontend-ui to build a data table for displaying users with sorting, filtering, and pagination\n</code></pre></p> <p>Accessible Modal: <pre><code>Use frontend-ui to create an accessible modal dialog for confirming delete actions\n</code></pre></p>"},{"location":"agents/javascript-specialists/#code-example_1","title":"Code Example","text":"<p>Form with react-hook-form and Zod:</p> <pre><code>'use client'\n\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\n\nconst formSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n})\n\nexport function SignupForm() {\n  const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      name: '',\n    },\n  })\n\n  async function onSubmit(values: z.infer&lt;typeof formSchema&gt;) {\n    // Handle signup\n    console.log(values)\n  }\n\n  return (\n    &lt;Form {...form}&gt;\n      &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\"&gt;\n        &lt;FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) =&gt; (\n            &lt;FormItem&gt;\n              &lt;FormLabel&gt;Name&lt;/FormLabel&gt;\n              &lt;FormControl&gt;\n                &lt;Input placeholder=\"John Doe\" {...field} /&gt;\n              &lt;/FormControl&gt;\n              &lt;FormMessage /&gt;\n            &lt;/FormItem&gt;\n          )}\n        /&gt;\n        &lt;FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) =&gt; (\n            &lt;FormItem&gt;\n              &lt;FormLabel&gt;Email&lt;/FormLabel&gt;\n              &lt;FormControl&gt;\n                &lt;Input type=\"email\" placeholder=\"john@example.com\" {...field} /&gt;\n              &lt;/FormControl&gt;\n              &lt;FormMessage /&gt;\n            &lt;/FormItem&gt;\n          )}\n        /&gt;\n        &lt;FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) =&gt; (\n            &lt;FormItem&gt;\n              &lt;FormLabel&gt;Password&lt;/FormLabel&gt;\n              &lt;FormControl&gt;\n                &lt;Input type=\"password\" {...field} /&gt;\n              &lt;/FormControl&gt;\n              &lt;FormMessage /&gt;\n            &lt;/FormItem&gt;\n          )}\n        /&gt;\n        &lt;Button type=\"submit\" className=\"w-full\"&gt;\n          Sign Up\n        &lt;/Button&gt;\n      &lt;/form&gt;\n    &lt;/Form&gt;\n  )\n}\n</code></pre>"},{"location":"agents/javascript-specialists/#backend-api","title":"backend-api","text":"<p>Name: <code>backend-api</code></p> <p>Description: Expert in type-safe APIs with tRPC, REST APIs, and NextAuth.js authentication.</p>"},{"location":"agents/javascript-specialists/#core-expertise_2","title":"Core Expertise","text":"<ul> <li>tRPC - End-to-end type safety, React Query integration</li> <li>REST APIs - Route Handlers, RESTful design</li> <li>NextAuth.js v5 - Authentication and session management</li> <li>OAuth Providers - GitHub, Google, etc.</li> <li>JWT &amp; Sessions - Token-based and session-based auth</li> <li>API Middleware - Rate limiting, CORS, validation</li> <li>Zod Validation - Input validation and transformation</li> <li>Error Handling - Structured error responses</li> <li>Authorization - Role-based access control</li> </ul>"},{"location":"agents/javascript-specialists/#when-to-use_2","title":"When to Use","text":"<ul> <li>Creating APIs (tRPC or REST)</li> <li>Implementing authentication</li> <li>Setting up OAuth providers</li> <li>Adding API middleware</li> <li>Input validation</li> <li>Authorization logic</li> </ul>"},{"location":"agents/javascript-specialists/#usage-examples_2","title":"Usage Examples","text":"<p>tRPC Router: <pre><code>Use backend-api to create a tRPC router for managing blog posts with create, update, delete, and list operations\n</code></pre></p> <p>Authentication: <pre><code>Use backend-api to implement NextAuth.js with email/password and GitHub OAuth\n</code></pre></p> <p>API Middleware: <pre><code>Use backend-api to add rate limiting middleware to the API routes\n</code></pre></p>"},{"location":"agents/javascript-specialists/#code-example_2","title":"Code Example","text":"<p>tRPC Router with authorization:</p> <pre><code>// server/routers/post.ts\nimport { z } from 'zod'\nimport { router, publicProcedure, protectedProcedure } from '../trpc'\n\nconst createPostSchema = z.object({\n  title: z.string().min(1).max(255),\n  content: z.string().min(1),\n  published: z.boolean().default(false),\n})\n\nexport const postRouter = router({\n  list: publicProcedure\n    .input(\n      z.object({\n        limit: z.number().min(1).max(100).default(10),\n        cursor: z.string().optional(),\n      })\n    )\n    .query(async ({ ctx, input }) =&gt; {\n      const posts = await ctx.db.post.findMany({\n        take: input.limit + 1,\n        cursor: input.cursor ? { id: input.cursor } : undefined,\n        orderBy: { createdAt: 'desc' },\n        where: { published: true },\n      })\n\n      let nextCursor: string | undefined = undefined\n      if (posts.length &gt; input.limit) {\n        const nextItem = posts.pop()\n        nextCursor = nextItem!.id\n      }\n\n      return { posts, nextCursor }\n    }),\n\n  byId: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) =&gt; {\n      const post = await ctx.db.post.findUnique({\n        where: { id: input.id },\n        include: { author: true },\n      })\n      if (!post) throw new Error('Post not found')\n      return post\n    }),\n\n  create: protectedProcedure\n    .input(createPostSchema)\n    .mutation(async ({ ctx, input }) =&gt; {\n      return ctx.db.post.create({\n        data: {\n          ...input,\n          authorId: ctx.session.user.id,\n        },\n      })\n    }),\n\n  update: protectedProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        data: createPostSchema.partial(),\n      })\n    )\n    .mutation(async ({ ctx, input }) =&gt; {\n      const post = await ctx.db.post.findUnique({\n        where: { id: input.id },\n      })\n\n      if (!post) throw new Error('Post not found')\n      if (post.authorId !== ctx.session.user.id) {\n        throw new Error('Unauthorized')\n      }\n\n      return ctx.db.post.update({\n        where: { id: input.id },\n        data: input.data,\n      })\n    }),\n\n  delete: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }) =&gt; {\n      const post = await ctx.db.post.findUnique({\n        where: { id: input.id },\n      })\n\n      if (!post) throw new Error('Post not found')\n      if (post.authorId !== ctx.session.user.id) {\n        throw new Error('Unauthorized')\n      }\n\n      return ctx.db.post.delete({\n        where: { id: input.id },\n      })\n    }),\n})\n</code></pre>"},{"location":"agents/javascript-specialists/#best-practices","title":"Best Practices","text":""},{"location":"agents/javascript-specialists/#1-choose-the-right-specialist","title":"1. Choose the Right Specialist","text":"<ul> <li>fullstack-nextjs for Server Components, routing, data fetching</li> <li>frontend-ui for UI components, forms, layouts</li> <li>backend-api for APIs, authentication, authorization</li> </ul>"},{"location":"agents/javascript-specialists/#2-combine-specialists","title":"2. Combine Specialists","text":"<p>For complete features, use multiple specialists:</p> <pre><code># Database schema\nUse database to create blog post schema\n\n# API\nUse backend-api to create tRPC router for posts\n\n# Server Components\nUse fullstack-nextjs to build the blog listing page\n\n# UI Components\nUse frontend-ui to create the blog post form\n</code></pre>"},{"location":"agents/javascript-specialists/#3-be-specific","title":"3. Be Specific","text":"<p>Provide detailed requirements:</p> <pre><code># Good\nUse frontend-ui to create a multi-step wizard form with steps for profile, preferences, and confirmation. Include validation and progress indicator.\n\n# Less specific\nUse frontend-ui to create a form\n</code></pre>"},{"location":"agents/javascript-specialists/#4-request-best-practices","title":"4. Request Best Practices","text":"<p>Ask specialists about best practices:</p> <pre><code>Use fullstack-nextjs to show best practices for data fetching with Server Components\n</code></pre>"},{"location":"agents/javascript-specialists/#specialist-workflow","title":"Specialist Workflow","text":"<p>When building a feature:</p> <pre><code>flowchart TB\n    Start([Feature Request]) --&gt; Design[Design Phase]\n\n    Design --&gt; DB[database specialist&lt;br/&gt;Schema design]\n    DB --&gt; API[backend-api specialist&lt;br/&gt;API creation]\n    API --&gt; Next[fullstack-nextjs specialist&lt;br/&gt;Server Components]\n    Next --&gt; UI[frontend-ui specialist&lt;br/&gt;Client Components]\n\n    UI --&gt; Integration[Integration Testing]\n    Integration --&gt; Review[code-reviewer&lt;br/&gt;Quality check]\n    Review --&gt; Complete([Complete Feature])</code></pre>"},{"location":"agents/javascript-specialists/#summary","title":"Summary","text":"<p>JavaScript specialists provide:</p> <ul> <li>Deep Expertise in specific frameworks</li> <li>Production-Ready Code with best practices</li> <li>Detailed Implementations for focused tasks</li> <li>Framework-Specific Patterns and optimizations</li> </ul>"},{"location":"agents/javascript-specialists/#next-steps","title":"Next Steps","text":"<ul> <li>View cross-cutting specialists</li> <li>Learn about savants</li> <li>See workflow examples</li> <li>Read best practices</li> </ul>"},{"location":"agents/savants/","title":"Savant Agents","text":"<p>Savant agents are master orchestrators with broad, deep knowledge across entire technology ecosystems. They make architectural decisions, choose technologies, and coordinate specialist agents for complex implementations.</p>"},{"location":"agents/savants/#what-makes-a-savant","title":"What Makes a Savant?","text":"<p>Savants combine:</p> <ul> <li>Breadth: Knowledge across the entire ecosystem (frontend, backend, database, deployment)</li> <li>Depth: Deep understanding of each framework and tool</li> <li>Decision-Making: Technology selection and architectural patterns</li> <li>Orchestration: Coordinates multiple specialists</li> <li>Best Practices: Industry-standard patterns and recommendations</li> </ul>"},{"location":"agents/savants/#when-to-use-savants","title":"When to Use Savants","text":"<p>Use savants when you need:</p> <ul> <li>Architectural decisions - Choosing between frameworks, patterns, and approaches</li> <li>Technology selection - Deciding on the tech stack for new projects</li> <li>Complex problems - Cross-cutting issues spanning multiple domains</li> <li>Full-stack coordination - Building features that touch database, API, and UI</li> <li>High-level guidance - Understanding tradeoffs and best practices</li> <li>Integration planning - How different pieces fit together</li> </ul>"},{"location":"agents/savants/#current-savants","title":"Current Savants","text":""},{"location":"agents/savants/#fullstack-js-savant","title":"fullstack-js-savant","text":"<p>Name: <code>fullstack-js-savant</code></p> <p>Description: Master expert in fullstack JavaScript/TypeScript development. Orchestrates entire application development from architecture to deployment.</p>"},{"location":"agents/savants/#core-expertise","title":"Core Expertise","text":"<p>Frontend Frameworks:</p> <ul> <li>React 18+ (Hooks, Context, Server Components, Suspense)</li> <li>Next.js 15+ (App Router, Server Actions, Streaming)</li> <li>Vue 3 (Composition API, Nuxt 3)</li> <li>Angular 18+ (Signals, Standalone Components)</li> <li>Svelte/SvelteKit</li> <li>Solid.js</li> </ul> <p>Backend Frameworks:</p> <ul> <li>Node.js (Event loop, streams, workers, clustering)</li> <li>Express.js (Middleware, routing, REST APIs)</li> <li>NestJS (Dependency injection, microservices, GraphQL)</li> <li>Fastify (High performance, schema validation)</li> <li>Hono (Edge-first framework)</li> <li>tRPC (End-to-end type safety)</li> </ul> <p>Database &amp; ORM:</p> <ul> <li>PostgreSQL (Advanced queries, indexing, partitioning)</li> <li>MongoDB (Aggregation pipeline, indexing)</li> <li>Redis (Caching strategies, pub/sub)</li> <li>Prisma (Schema design, migrations, query optimization)</li> <li>Drizzle (Type-safe ORM)</li> <li>TypeORM</li> </ul> <p>Real-time &amp; Communication:</p> <ul> <li>WebSockets (Socket.io, ws)</li> <li>Server-Sent Events</li> <li>GraphQL (Apollo Server, subscriptions)</li> <li>gRPC (Protocol buffers)</li> </ul> <p>Authentication &amp; Security:</p> <ul> <li>NextAuth.js v5 (OAuth, credentials, JWT)</li> <li>Passport.js</li> <li>Auth0, Clerk, Supabase Auth</li> <li>JWT, OAuth2, OIDC</li> <li>OWASP Top 10</li> </ul> <p>State Management:</p> <ul> <li>React: useState, useReducer, Context, Zustand, Jotai, Redux Toolkit</li> <li>Vue: Pinia, Vuex</li> <li>TanStack Query (server state)</li> </ul> <p>Build Tools:</p> <ul> <li>Vite, Turbopack, Webpack, esbuild, Rollup</li> </ul> <p>Testing:</p> <ul> <li>Vitest, Jest, Playwright, Cypress, Testing Library</li> </ul> <p>DevOps:</p> <ul> <li>Vercel, Netlify, Docker, Kubernetes</li> <li>GitHub Actions, GitLab CI</li> <li>Sentry, DataDog, OpenTelemetry</li> </ul>"},{"location":"agents/savants/#usage-examples","title":"Usage Examples","text":"<p>Architecture Decision:</p> <pre><code>Use fullstack-js-savant to help me choose between Next.js App Router and Remix for my new SaaS application\n</code></pre> <p>Complex Feature:</p> <pre><code>Use fullstack-js-savant to design a real-time collaborative document editing system\n</code></pre> <p>Technology Selection:</p> <pre><code>Use fullstack-js-savant to recommend a tech stack for an e-commerce platform with 1M+ users\n</code></pre> <p>Full-Stack Implementation:</p> <pre><code>Use fullstack-js-savant to build a complete authentication system with email/password and OAuth\n</code></pre>"},{"location":"agents/savants/#expected-response-pattern","title":"Expected Response Pattern","text":"<p>When you invoke the savant, expect:</p> <ol> <li> <p>Requirement Analysis</p> <ul> <li>Understanding your needs</li> <li>Identifying constraints</li> <li>Clarifying requirements</li> </ul> </li> <li> <p>Architecture Proposal</p> <ul> <li>Technology stack recommendation</li> <li>Architecture patterns</li> <li>Justification for choices</li> </ul> </li> <li> <p>Implementation Plan</p> <ul> <li>Step-by-step breakdown</li> <li>Which specialists to use</li> <li>Integration points</li> </ul> </li> <li> <p>Code Examples</p> <ul> <li>Production-ready patterns</li> <li>Best practices</li> <li>Common pitfalls to avoid</li> </ul> </li> <li> <p>Delegation Strategy</p> <ul> <li>When to use specialists</li> <li>How pieces integrate</li> <li>Review checkpoints</li> </ul> </li> </ol>"},{"location":"agents/savants/#architecture-decision-framework","title":"Architecture Decision Framework","text":"<p>The savant uses this framework for decisions:</p> <p>Project Scale:</p> <ul> <li>Small (MVP, prototypes): Next.js + Vercel + Supabase</li> <li>Medium (SaaS, B2B): Next.js + tRPC + Prisma + PostgreSQL</li> <li>Large (Enterprise): Microservices with NestJS + Next.js frontend</li> <li>Real-time: Next.js + Socket.io + Redis</li> </ul> <p>Performance Requirements:</p> <ul> <li>High Performance: Fastify, Hono, Solid.js</li> <li>Standard: Next.js, Express, React</li> <li>SEO Critical: Next.js App Router, Nuxt 3, Remix</li> </ul> <p>Team Expertise:</p> <ul> <li>TypeScript Strong: tRPC, Prisma, Next.js</li> <li>Traditional Backend: Express + React</li> <li>Full-Type Safety: End-to-end TypeScript with tRPC</li> </ul>"},{"location":"agents/savants/#example-interaction","title":"Example Interaction","text":"<p>User Request: <pre><code>Use fullstack-js-savant to design a blog platform with comments, likes, and user authentication\n</code></pre></p> <p>Savant Response:</p> <pre><code>## Blog Platform Architecture\n\n### Technology Stack Recommendation\n\n**Frontend:** Next.js 15 with App Router\n- Server Components for blog posts (SEO)\n- Client Components for interactive features\n- Streaming for better UX\n\n**Backend:** tRPC for type-safe APIs\n- End-to-end type safety\n- Excellent DX with TypeScript\n- Built-in validation with Zod\n\n**Database:** PostgreSQL with Prisma\n- Relational data (posts, comments, users)\n- ACID transactions\n- Full-text search capability\n\n**Authentication:** NextAuth.js v5\n- Email/password provider\n- OAuth providers (GitHub, Google)\n- Session management\n- Protected routes\n\n### Database Schema\n\n```prisma\nmodel User {\n  id        String    @id @default(cuid())\n  email     String    @unique\n  name      String\n  posts     Post[]\n  comments  Comment[]\n  likes     Like[]\n}\n\nmodel Post {\n  id        String    @id @default(cuid())\n  title     String\n  slug      String    @unique\n  content   String    @db.Text\n  published Boolean   @default(false)\n  authorId  String\n  author    User      @relation(fields: [authorId], references: [id])\n  comments  Comment[]\n  likes     Like[]\n  createdAt DateTime  @default(now())\n}\n\nmodel Comment {\n  id        String   @id @default(cuid())\n  content   String\n  postId    String\n  post      Post     @relation(fields: [postId], references: [id])\n  authorId  String\n  author    User     @relation(fields: [authorId], references: [id])\n  createdAt DateTime @default(now())\n}\n\nmodel Like {\n  id        String   @id @default(cuid())\n  postId    String\n  post      Post     @relation(fields: [postId], references: [id])\n  userId    String\n  user      User     @relation(fields: [userId], references: [id])\n  createdAt DateTime @default(now())\n\n  @@unique([postId, userId])\n}\n</code></pre>"},{"location":"agents/savants/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Database Setup (Delegate to <code>database</code> specialist)</li> <li>Create Prisma schema</li> <li>Set up migrations</li> <li> <p>Add indexes for performance</p> </li> <li> <p>Authentication (Delegate to <code>backend-api</code> specialist)</p> </li> <li>Configure NextAuth.js</li> <li>Set up OAuth providers</li> <li> <p>Implement protected routes</p> </li> <li> <p>Blog API (Delegate to <code>backend-api</code> specialist)</p> </li> <li>Create tRPC router for posts</li> <li>Add CRUD operations</li> <li> <p>Implement comments and likes</p> </li> <li> <p>UI Components (Delegate to <code>frontend-ui</code> specialist)</p> </li> <li>Blog post list with shadcn/ui</li> <li>Post detail page</li> <li>Comment section</li> <li> <p>Create post form</p> </li> <li> <p>Integration &amp; Testing (Use <code>qa-tester</code> specialist)</p> </li> <li>E2E tests with Playwright</li> <li>Unit tests for API</li> </ol>"},{"location":"agents/savants/#next-steps","title":"Next Steps","text":"<ol> <li>Use database specialist to create the schema</li> <li>Use backend-api to implement authentication</li> <li>Use fullstack-nextjs to build the blog pages</li> <li>Use frontend-ui to create interactive components</li> <li>Use code-reviewer to review implementation <pre><code>---\n\n### java-spring-savant\n\n**Name:** `java-spring-savant`\n\n**Description:** Master expert in Spring ecosystem and enterprise Java development.\n\n#### Core Expertise\n\n**Spring Framework:**\n\n- Spring Boot 3.x (Auto-configuration, starters)\n- Spring Security (Authentication, authorization)\n- Spring Data JPA (Repositories, queries)\n- Spring Web (REST APIs, MVC)\n- Spring Cloud (Microservices patterns)\n\n**Database:**\n\n- PostgreSQL, MySQL, Oracle\n- JPA, Hibernate\n- Query optimization\n- Transaction management\n\n**Architecture Patterns:**\n\n- Microservices\n- Event-driven architecture\n- Domain-driven design\n- Clean architecture\n\n**Security:**\n\n- OAuth2, JWT\n- Spring Security\n- RBAC, ABAC\n- API security\n\n**Testing:**\n\n- JUnit 5, Mockito\n- TestContainers\n- Integration testing\n- Performance testing\n\n#### Usage Examples\n\n**Microservices Architecture:**\n\n```bash\nUse java-spring-savant to design a microservices architecture for an enterprise application\n</code></pre></li> </ol> <p>Spring Security:</p> <pre><code>Use java-spring-savant to implement OAuth2 authentication with Spring Security\n</code></pre> <p>API Design:</p> <pre><code>Use java-spring-savant to design RESTful APIs following Spring best practices\n</code></pre>"},{"location":"agents/savants/#savant-workflow","title":"Savant Workflow","text":"<p>When you invoke a savant:</p> <pre><code>sequenceDiagram\n    participant User\n    participant Savant\n    participant Specialist1\n    participant Specialist2\n    participant Specialist3\n\n    User-&gt;&gt;Savant: Complex requirement\n    Savant-&gt;&gt;Savant: Analyze &amp; Design\n    Savant-&gt;&gt;User: Architecture proposal\n\n    User-&gt;&gt;Savant: Approved, implement\n\n    Savant-&gt;&gt;Specialist1: Delegate database\n    Specialist1-&gt;&gt;Savant: Schema complete\n\n    Savant-&gt;&gt;Specialist2: Delegate API\n    Specialist2-&gt;&gt;Savant: API complete\n\n    Savant-&gt;&gt;Specialist3: Delegate UI\n    Specialist3-&gt;&gt;Savant: UI complete\n\n    Savant-&gt;&gt;Savant: Integration review\n    Savant-&gt;&gt;User: Complete solution</code></pre>"},{"location":"agents/savants/#best-practices","title":"Best Practices","text":""},{"location":"agents/savants/#1-provide-context","title":"1. Provide Context","text":"<p>Give savants enough information to make informed decisions:</p> <pre><code># Good\nUse fullstack-js-savant to design a SaaS platform for project management.\nExpected scale: 10,000 users, real-time updates needed, team of 5 developers.\n\n# Not enough context\nUse fullstack-js-savant to build an app\n</code></pre>"},{"location":"agents/savants/#2-ask-for-tradeoffs","title":"2. Ask for Tradeoffs","text":"<p>Savants excel at explaining tradeoffs:</p> <pre><code>Use fullstack-js-savant to compare Next.js App Router vs Remix for my use case\n</code></pre>"},{"location":"agents/savants/#3-leverage-orchestration","title":"3. Leverage Orchestration","text":"<p>Let savants coordinate specialists:</p> <pre><code>Use fullstack-js-savant to build a complete blog feature\n# Savant will orchestrate database, backend-api, frontend-ui\n</code></pre>"},{"location":"agents/savants/#4-request-architecture-reviews","title":"4. Request Architecture Reviews","text":"<p>Use savants to review existing architecture:</p> <pre><code>Use fullstack-js-savant to review my current architecture and suggest improvements\n</code></pre>"},{"location":"agents/savants/#savant-vs-specialist","title":"Savant vs Specialist","text":""},{"location":"agents/savants/#use-savant-when","title":"Use Savant When:","text":"<ul> <li>Making architectural decisions</li> <li>Choosing technologies</li> <li>Need cross-cutting guidance</li> <li>Building complex features</li> <li>Want orchestration</li> </ul>"},{"location":"agents/savants/#use-specialist-when","title":"Use Specialist When:","text":"<ul> <li>Implementing specific features</li> <li>Deep domain expertise needed</li> <li>Know what technology to use</li> <li>Quick, focused tasks</li> </ul>"},{"location":"agents/savants/#future-savants","title":"Future Savants","text":"<p>The architecture supports additional savants:</p> <ul> <li>python-django-savant - Python/Django ecosystem</li> <li>golang-savant - Go ecosystem</li> <li>dotnet-savant - .NET/C# ecosystem</li> <li>mobile-savant - React Native/Flutter</li> <li>typescript-fullstack-savant - Pure TypeScript focus</li> </ul>"},{"location":"agents/savants/#summary","title":"Summary","text":"<p>Savants provide:</p> <ul> <li>Breadth: Knowledge across entire ecosystem</li> <li>Depth: Deep understanding of each tool</li> <li>Orchestration: Coordinates specialists</li> <li>Best Practices: Industry standards</li> <li>Decision-Making: Technology selection</li> </ul>"},{"location":"agents/savants/#next-steps_1","title":"Next Steps","text":"<ul> <li>View JavaScript specialists</li> <li>View cross-cutting specialists</li> <li>Learn workflow commands</li> <li>See workflow examples</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>MCP Sub-Agents implements a two-tier agent architecture designed to provide both breadth and depth of expertise across technology stacks.</p>"},{"location":"architecture/overview/#two-tier-architecture","title":"Two-Tier Architecture","text":"<pre><code>graph TB\n    subgraph tier1[\"TIER 1: SAVANTS (Orchestrators)\"]\n        direction LR\n        js[fullstack-js-savant&lt;br/&gt;JavaScript/TypeScript Master]\n        java[java-spring-savant&lt;br/&gt;Spring Ecosystem Master]\n    end\n\n    subgraph tier2[\"TIER 2: SPECIALISTS (Implementers)\"]\n        subgraph jsstack[JavaScript Stack]\n            direction TB\n            jsspec1[fullstack-nextjs&lt;br/&gt;Next.js Expert]\n            jsspec2[frontend-ui&lt;br/&gt;UI/UX Expert]\n            jsspec3[backend-api&lt;br/&gt;API Expert]\n        end\n\n        subgraph crosscut[Cross-Cutting Concerns]\n            direction TB\n            cross1[code-reviewer&lt;br/&gt;Quality]\n            cross2[qa-tester&lt;br/&gt;Testing]\n            cross3[security&lt;br/&gt;Security]\n            cross4[performance&lt;br/&gt;Performance]\n            cross5[deployment&lt;br/&gt;DevOps]\n            cross6[database&lt;br/&gt;Data]\n            cross7[monitoring&lt;br/&gt;Observability]\n            cross8[architect&lt;br/&gt;Design]\n            cross9[tech-writer&lt;br/&gt;Documentation]\n        end\n    end\n\n    tier1 --&gt;|Delegates to| tier2</code></pre>"},{"location":"architecture/overview/#architecture-principles","title":"Architecture Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Tier 1: Savants</p> <ul> <li>Broad knowledge across entire ecosystems</li> <li>Architectural decision making</li> <li>Technology selection and comparison</li> <li>Cross-cutting integration</li> <li>Orchestration of specialists</li> </ul> <p>Tier 2: Specialists</p> <ul> <li>Deep expertise in specific domains</li> <li>Implementation details</li> <li>Framework-specific patterns</li> <li>Detailed code generation</li> <li>Domain-specific optimization</li> </ul>"},{"location":"architecture/overview/#2-flexible-invocation","title":"2. Flexible Invocation","text":"<p>The architecture supports multiple usage patterns:</p> <pre><code>flowchart TB\n    Start([Developer Need]) --&gt; Q1{Task Complexity}\n\n    Q1 --&gt;|Simple/Specific| DirectSpec[Direct Specialist]\n    Q1 --&gt;|Complex/Architecture| Savant[Savant Orchestrator]\n    Q1 --&gt;|Learning/Guided| Workflow[Workflow Command]\n\n    DirectSpec --&gt; Result[Implementation]\n    Savant --&gt; Orchestrate[Orchestrate Specialists]\n    Workflow --&gt; Guide[Step-by-Step Guidance]\n\n    Orchestrate --&gt; Result\n    Guide --&gt; Result</code></pre>"},{"location":"architecture/overview/#3-knowledge-hierarchy","title":"3. Knowledge Hierarchy","text":"<pre><code>graph LR\n    Savant[Savant Agent&lt;br/&gt;Breadth + Depth] --&gt; Specialist1[Specialist 1&lt;br/&gt;Deep Expertise]\n    Savant --&gt; Specialist2[Specialist 2&lt;br/&gt;Deep Expertise]\n    Savant --&gt; Specialist3[Specialist 3&lt;br/&gt;Deep Expertise]\n\n    Specialist1 --&gt; Impl1[Implementation]\n    Specialist2 --&gt; Impl2[Implementation]\n    Specialist3 --&gt; Impl3[Implementation]\n\n    Savant --&gt; Integration[Integration&lt;br/&gt;&amp; Review]\n    Impl1 --&gt; Integration\n    Impl2 --&gt; Integration\n    Impl3 --&gt; Integration</code></pre>"},{"location":"architecture/overview/#tier-1-savants","title":"Tier 1: Savants","text":""},{"location":"architecture/overview/#what-is-a-savant","title":"What is a Savant?","text":"<p>A savant is a master expert with comprehensive knowledge across an entire technology ecosystem. Savants make architectural decisions, choose technologies, and orchestrate specialist agents.</p>"},{"location":"architecture/overview/#savant-characteristics","title":"Savant Characteristics","text":"<ul> <li>Breadth: Knowledge of entire ecosystem (frontend, backend, database, deployment)</li> <li>Depth: Deep understanding of each framework and tool</li> <li>Decision-Making: Technology selection and architectural patterns</li> <li>Orchestration: Coordinates multiple specialists for complex tasks</li> <li>Best Practices: Industry-standard patterns and recommendations</li> </ul>"},{"location":"architecture/overview/#current-savants","title":"Current Savants","text":""},{"location":"architecture/overview/#fullstack-js-savant","title":"fullstack-js-savant","text":"<p>Master of JavaScript/TypeScript ecosystem:</p> <ul> <li>Frontend: React, Next.js, Vue, Angular, Svelte</li> <li>Backend: Node.js, Express, NestJS, Fastify</li> <li>Database: PostgreSQL, MongoDB, Redis with ORMs</li> <li>Real-time: WebSockets, Server-Sent Events</li> <li>Authentication: NextAuth.js, Passport.js, OAuth</li> <li>State Management: Redux, Zustand, TanStack Query</li> <li>Build Tools: Vite, Webpack, Turbopack</li> <li>Testing: Vitest, Playwright, Jest</li> <li>Deployment: Vercel, Docker, Kubernetes</li> </ul> <p>When to use:</p> <ul> <li>Designing fullstack JavaScript applications</li> <li>Choosing between frontend frameworks</li> <li>Selecting authentication strategies</li> <li>Planning real-time features</li> <li>Making database decisions</li> <li>Architecting complex features</li> </ul>"},{"location":"architecture/overview/#java-spring-savant","title":"java-spring-savant","text":"<p>Master of Spring ecosystem:</p> <ul> <li>Spring Boot, Spring Security, Spring Data</li> <li>JPA, Hibernate, database integration</li> <li>Microservices architecture</li> <li>REST and GraphQL APIs</li> <li>Testing with JUnit and Mockito</li> <li>Cloud deployment and containerization</li> </ul> <p>When to use:</p> <ul> <li>Designing Spring-based applications</li> <li>Enterprise Java architecture</li> <li>Microservices planning</li> <li>Spring Security implementation</li> </ul>"},{"location":"architecture/overview/#savant-workflow","title":"Savant Workflow","text":"<pre><code>sequenceDiagram\n    participant Dev as Developer\n    participant Savant as Savant Agent\n    participant Spec1 as Specialist 1\n    participant Spec2 as Specialist 2\n    participant Spec3 as Specialist 3\n\n    Dev-&gt;&gt;Savant: Complex requirement\n    Savant-&gt;&gt;Savant: Analyze &amp; Design\n    Savant-&gt;&gt;Dev: Architecture proposal\n    Dev-&gt;&gt;Savant: Approved\n\n    Savant-&gt;&gt;Spec1: Delegate database design\n    Spec1-&gt;&gt;Savant: Schema implementation\n\n    Savant-&gt;&gt;Spec2: Delegate API creation\n    Spec2-&gt;&gt;Savant: API implementation\n\n    Savant-&gt;&gt;Spec3: Delegate UI components\n    Spec3-&gt;&gt;Savant: UI implementation\n\n    Savant-&gt;&gt;Savant: Integration review\n    Savant-&gt;&gt;Dev: Complete solution</code></pre>"},{"location":"architecture/overview/#tier-2-specialists","title":"Tier 2: Specialists","text":""},{"location":"architecture/overview/#what-is-a-specialist","title":"What is a Specialist?","text":"<p>A specialist is a deep domain expert focusing on a specific framework, tool, or practice. Specialists handle detailed implementation and optimization.</p>"},{"location":"architecture/overview/#specialist-categories","title":"Specialist Categories","text":""},{"location":"architecture/overview/#1-stack-specific-specialists","title":"1. Stack-Specific Specialists","text":"<p>Experts in particular technology stacks:</p> <p>JavaScript/TypeScript Specialists:</p> <ul> <li>fullstack-nextjs - Next.js 15+ with App Router</li> <li>frontend-ui - shadcn/ui and Tailwind CSS</li> <li>backend-api - tRPC and NextAuth.js</li> </ul> <p>Java Specialists (Future):</p> <ul> <li>spring-boot</li> <li>spring-security</li> <li>spring-data-jpa</li> </ul>"},{"location":"architecture/overview/#2-cross-cutting-specialists","title":"2. Cross-Cutting Specialists","text":"<p>Experts that work across all stacks:</p> <ul> <li>code-reviewer - Code quality and best practices</li> <li>qa-tester - Testing strategies and implementation</li> <li>security - Security audits and OWASP compliance</li> <li>performance - Optimization and Core Web Vitals</li> <li>deployment - CI/CD and infrastructure</li> <li>database - Schema design and query optimization</li> <li>monitoring - Observability and error tracking</li> <li>architect - System design and scalability</li> <li>tech-writer - Technical documentation</li> </ul>"},{"location":"architecture/overview/#specialist-characteristics","title":"Specialist Characteristics","text":"<ul> <li>Deep Focus: Expert in one specific domain</li> <li>Implementation Details: Production-ready code</li> <li>Best Practices: Domain-specific patterns</li> <li>Optimization: Performance and efficiency</li> <li>Testing: Domain-specific test strategies</li> </ul>"},{"location":"architecture/overview/#usage-patterns","title":"Usage Patterns","text":""},{"location":"architecture/overview/#pattern-1-simple-implementation","title":"Pattern 1: Simple Implementation","text":"<p>For straightforward tasks, use specialists directly:</p> <pre><code>Use frontend-ui to create a login form with shadcn/ui\n</code></pre> <p>Flow:</p> <pre><code>flowchart LR\n    Dev[Developer] --&gt; Spec[frontend-ui]\n    Spec --&gt; Code[Login Form Code]</code></pre>"},{"location":"architecture/overview/#pattern-2-complex-feature","title":"Pattern 2: Complex Feature","text":"<p>For complex features, use savant orchestration:</p> <pre><code>Use fullstack-js-savant to build a real-time chat feature\n</code></pre> <p>Flow:</p> <pre><code>flowchart TB\n    Dev[Developer] --&gt; Savant[fullstack-js-savant]\n    Savant --&gt; Design[Architecture Design]\n    Design --&gt; D1[Database Schema]\n    Design --&gt; D2[WebSocket Server]\n    Design --&gt; D3[Chat UI]\n\n    D1 --&gt; S1[database specialist]\n    D2 --&gt; S2[backend-api specialist]\n    D3 --&gt; S3[frontend-ui specialist]\n\n    S1 --&gt; I1[Implementation]\n    S2 --&gt; I2[Implementation]\n    S3 --&gt; I3[Implementation]\n\n    I1 --&gt; Review[Savant Review]\n    I2 --&gt; Review\n    I3 --&gt; Review\n    Review --&gt; Complete[Complete Feature]</code></pre>"},{"location":"architecture/overview/#pattern-3-workflow-guided","title":"Pattern 3: Workflow-Guided","text":"<p>For learning or ensuring best practices:</p> <pre><code>/mcp-implement-fullstack\n</code></pre> <p>Flow:</p> <pre><code>flowchart TB\n    Dev[Developer] --&gt; Workflow[Workflow Command]\n    Workflow --&gt; C1[Checklist Step 1]\n    Workflow --&gt; C2[Checklist Step 2]\n    Workflow --&gt; C3[Checklist Step 3]\n\n    C1 --&gt; Agent1[Invoke Agent 1]\n    C2 --&gt; Agent2[Invoke Agent 2]\n    C3 --&gt; Agent3[Invoke Agent 3]\n\n    Agent1 --&gt; Result[Complete Implementation]\n    Agent2 --&gt; Result\n    Agent3 --&gt; Result</code></pre>"},{"location":"architecture/overview/#pattern-4-multi-phase-development","title":"Pattern 4: Multi-Phase Development","text":"<p>For complete feature development:</p> <pre><code># Phase 1: Design\n/mcp-design-nextjs\n\n# Phase 2: Implementation\n/mcp-implement-fullstack\n\n# Phase 3: Review\n/mcp-review-code\n/mcp-review-security\n\n# Phase 4: QA\n/mcp-qa-e2e\n\n# Phase 5: Deploy\n/mcp-deploy\n</code></pre>"},{"location":"architecture/overview/#decision-matrix","title":"Decision Matrix","text":""},{"location":"architecture/overview/#when-to-use-savants","title":"When to Use Savants","text":"<p>Use savants when you need:</p> <ul> <li>Architecture decisions</li> <li>Technology selection</li> <li>Complex cross-cutting problems</li> <li>Full-stack feature coordination</li> <li>High-level technical guidance</li> <li>Integration planning</li> <li>Tradeoff analysis</li> </ul>"},{"location":"architecture/overview/#when-to-use-specialists","title":"When to Use Specialists","text":"<p>Use specialists when you need:</p> <ul> <li>Framework-specific implementation</li> <li>UI component development</li> <li>API endpoint creation</li> <li>Database schema design</li> <li>Security audits</li> <li>Performance optimization</li> <li>Detailed code generation</li> <li>Domain-specific best practices</li> </ul>"},{"location":"architecture/overview/#when-to-use-workflow-commands","title":"When to Use Workflow Commands","text":"<p>Use workflow commands when you need:</p> <ul> <li>Step-by-step guidance</li> <li>Learning new patterns</li> <li>Ensuring completeness</li> <li>Following best practices</li> <li>Structured development</li> <li>Comprehensive checklists</li> </ul>"},{"location":"architecture/overview/#agent-communication","title":"Agent Communication","text":""},{"location":"architecture/overview/#how-savants-delegate","title":"How Savants Delegate","text":"<p>When a savant encounters a task requiring deep expertise:</p> <pre><code>// Conceptual delegation pattern\nclass SavantAgent {\n  async handleRequest(requirement: string) {\n    // 1. Analyze requirement\n    const analysis = this.analyzeRequirement(requirement)\n\n    // 2. Design architecture\n    const architecture = this.designArchitecture(analysis)\n\n    // 3. Identify required specialists\n    const specialists = this.identifySpecialists(architecture)\n\n    // 4. Delegate to specialists\n    const implementations = await Promise.all(\n      specialists.map(spec =&gt; spec.implement(architecture))\n    )\n\n    // 5. Review integration\n    const integration = this.reviewIntegration(implementations)\n\n    // 6. Return complete solution\n    return {\n      architecture,\n      implementations,\n      integration,\n      recommendations: this.getRecommendations()\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/overview/#agent-collaboration-example","title":"Agent Collaboration Example","text":"<p>Building a blog feature:</p> <pre><code>sequenceDiagram\n    participant Dev\n    participant Savant as fullstack-js-savant\n    participant DB as database\n    participant API as backend-api\n    participant UI as frontend-ui\n    participant Review as code-reviewer\n\n    Dev-&gt;&gt;Savant: Build blog feature\n    Savant-&gt;&gt;Savant: Design architecture\n\n    Savant-&gt;&gt;DB: Create blog schema\n    DB-&gt;&gt;Savant: Prisma schema\n\n    Savant-&gt;&gt;API: Create blog API\n    API-&gt;&gt;Savant: tRPC router\n\n    Savant-&gt;&gt;UI: Create blog UI\n    UI-&gt;&gt;Savant: Components\n\n    Savant-&gt;&gt;Review: Review implementation\n    Review-&gt;&gt;Savant: Quality report\n\n    Savant-&gt;&gt;Dev: Complete blog feature</code></pre>"},{"location":"architecture/overview/#extensibility","title":"Extensibility","text":""},{"location":"architecture/overview/#adding-new-savants","title":"Adding New Savants","text":"<p>The architecture supports additional savants for other ecosystems:</p> <ul> <li>python-django-savant - Python/Django ecosystem</li> <li>golang-savant - Go ecosystem</li> <li>dotnet-savant - .NET/C# ecosystem</li> <li>mobile-savant - React Native/Flutter</li> </ul>"},{"location":"architecture/overview/#adding-new-specialists","title":"Adding New Specialists","text":"<p>New specialists can be added for:</p> <ul> <li>Specific frameworks (e.g., remix-fullstack, vue-nuxt)</li> <li>Additional tools (e.g., graphql-api, redis-cache)</li> <li>Emerging patterns (e.g., edge-computing, web3)</li> </ul>"},{"location":"architecture/overview/#best-practices","title":"Best Practices","text":""},{"location":"architecture/overview/#1-start-with-architecture","title":"1. Start with Architecture","text":"<p>For complex features, always start with architecture:</p> <pre><code># Good\nUse fullstack-js-savant to design the feature\n# Then implement with specialists\n\n# Not ideal\nUse frontend-ui to build components\n# Without architecture planning\n</code></pre>"},{"location":"architecture/overview/#2-use-the-right-level","title":"2. Use the Right Level","text":"<p>Match complexity with agent tier:</p> <pre><code># Simple task - use specialist\nUse frontend-ui to create a button component\n\n# Complex task - use savant\nUse fullstack-js-savant to design a multi-tenant SaaS architecture\n</code></pre>"},{"location":"architecture/overview/#3-leverage-workflow-commands","title":"3. Leverage Workflow Commands","text":"<p>For standardized processes:</p> <pre><code># Instead of manual steps\n/mcp-review-security  # Comprehensive security audit\n\n# Instead of\nUse security to check for XSS\nUse security to check for SQL injection\nUse security to check for...\n</code></pre>"},{"location":"architecture/overview/#4-review-and-iterate","title":"4. Review and Iterate","text":"<p>Always review implementations:</p> <pre><code># After implementation\nUse code-reviewer to review the implementation\n\n# Address issues\nUse [relevant-specialist] to fix identified issues\n\n# Re-review\nUse code-reviewer to verify fixes\n</code></pre>"},{"location":"architecture/overview/#summary","title":"Summary","text":"<p>The two-tier architecture provides:</p> <ul> <li>Flexibility: Choose the right tool for the task</li> <li>Expertise: Deep knowledge at both breadth and depth</li> <li>Efficiency: Direct access or guided workflows</li> <li>Quality: Built-in review and best practices</li> <li>Scalability: Extensible for new technologies</li> </ul>"},{"location":"architecture/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about workflow commands</li> <li>Explore savant agents</li> <li>View specialist agents</li> <li>See workflow examples</li> </ul>"},{"location":"architecture/workflow-commands/","title":"Workflow Commands","text":"<p>Workflow commands provide structured, step-by-step guidance through each stage of the software development lifecycle. Each command invokes appropriate agents and provides checklists, best practices, and comprehensive guidance.</p>"},{"location":"architecture/workflow-commands/#command-structure","title":"Command Structure","text":"<p>All workflow commands follow this pattern:</p> <pre><code>/mcp-[stage]-[technology]\n</code></pre> <p>Examples:</p> <ul> <li><code>/mcp-design-architecture</code> - General architecture design</li> <li><code>/mcp-design-nextjs</code> - Next.js-specific design</li> <li><code>/mcp-implement-fullstack</code> - Full-stack implementation</li> <li><code>/mcp-review-security</code> - Security-focused review</li> </ul>"},{"location":"architecture/workflow-commands/#complete-command-reference","title":"Complete Command Reference","text":""},{"location":"architecture/workflow-commands/#design-phase","title":"Design Phase","text":""},{"location":"architecture/workflow-commands/#mcp-design-architecture","title":"/mcp-design-architecture","text":"<p>Purpose: Design system architecture and make high-level technical decisions</p> <p>Invokes: <code>architect</code> agent</p> <p>Time: 30-45 minutes</p> <p>Covers:</p> <ul> <li>Requirements analysis</li> <li>System architecture design</li> <li>Technology stack selection</li> <li>Scalability planning</li> <li>Security considerations</li> <li>Documentation generation</li> </ul> <p>Output:</p> <ul> <li>Architecture diagrams</li> <li>Technology stack decisions</li> <li>Architecture Decision Records (ADRs)</li> <li>Component diagrams</li> <li>Integration patterns</li> </ul> <p>Use when:</p> <ul> <li>Starting a new project</li> <li>Adding major features</li> <li>Refactoring architecture</li> <li>Making technology decisions</li> </ul>"},{"location":"architecture/workflow-commands/#mcp-design-nextjs","title":"/mcp-design-nextjs","text":"<p>Purpose: Design Next.js application structure with modern patterns</p> <p>Invokes: <code>fullstack-js-savant</code> agent</p> <p>Time: 20-30 minutes</p> <p>Covers:</p> <ul> <li>App Router structure and organization</li> <li>Server vs Client Component strategy</li> <li>Data fetching patterns</li> <li>API layer design (tRPC vs Route Handlers)</li> <li>Authentication flow</li> <li>UI component hierarchy</li> <li>Performance planning</li> <li>SEO considerations</li> </ul> <p>Output:</p> <ul> <li>File structure plan</li> <li>Route organization</li> <li>Component hierarchy</li> <li>Data flow diagrams</li> <li>API contract definitions</li> </ul> <p>Use when:</p> <ul> <li>Starting a Next.js project</li> <li>Planning new features</li> <li>Refactoring application structure</li> <li>Optimizing architecture</li> </ul>"},{"location":"architecture/workflow-commands/#implementation-phase","title":"Implementation Phase","text":""},{"location":"architecture/workflow-commands/#mcp-implement-fullstack","title":"/mcp-implement-fullstack","text":"<p>Purpose: Build complete features end-to-end with full-stack orchestration</p> <p>Invokes: Multiple agents orchestrated by <code>fullstack-js-savant</code></p> <p>Time: 60-90 minutes</p> <p>Workflow:</p> <ol> <li>Database schema design (with <code>database</code> agent)</li> <li>Backend API implementation (with <code>backend-api</code> agent)</li> <li>Server Components creation (with <code>fullstack-nextjs</code> agent)</li> <li>UI components development (with <code>frontend-ui</code> agent)</li> <li>Integration and testing</li> <li>Security review</li> </ol> <p>Covers:</p> <ul> <li>Prisma schema and migrations</li> <li>tRPC routers or Route Handlers</li> <li>Server Actions for mutations</li> <li>Server Components for data fetching</li> <li>Client Components for interactivity</li> <li>Form handling with validation</li> <li>Error handling</li> <li>Loading states</li> </ul> <p>Use when:</p> <ul> <li>Building complete features</li> <li>Need end-to-end implementation</li> <li>Want orchestrated development</li> <li>Learning full-stack patterns</li> </ul>"},{"location":"architecture/workflow-commands/#mcp-implement-frontend","title":"/mcp-implement-frontend","text":"<p>Purpose: Build UI components and client-side features</p> <p>Invokes: <code>frontend-ui</code> agent</p> <p>Time: 30-45 minutes</p> <p>Covers:</p> <ul> <li>Component planning (Server vs Client)</li> <li>shadcn/ui component installation</li> <li>Form components with react-hook-form and Zod</li> <li>Display components and layouts</li> <li>Client-side features (optimistic updates, pagination)</li> <li>Responsive design</li> <li>Accessibility (WCAG AA compliance)</li> <li>Animations and polish</li> </ul> <p>Output:</p> <ul> <li>React components</li> <li>Form validation schemas</li> <li>Responsive layouts</li> <li>Accessibility features</li> <li>Loading and error states</li> </ul> <p>Use when:</p> <ul> <li>Building UI components</li> <li>Creating forms</li> <li>Implementing client features</li> <li>Ensuring accessibility</li> </ul>"},{"location":"architecture/workflow-commands/#mcp-implement-backend","title":"/mcp-implement-backend","text":"<p>Purpose: Build APIs, business logic, and data layer</p> <p>Invokes: <code>backend-api</code> and <code>database</code> agents</p> <p>Time: 30-45 minutes</p> <p>Covers:</p> <ul> <li>Database schema with Prisma</li> <li>Input validation with Zod</li> <li>tRPC routers OR Route Handlers</li> <li>Server Actions for mutations</li> <li>Business logic layer</li> <li>Error handling</li> <li>Authorization checks</li> <li>Query optimization</li> </ul> <p>Output:</p> <ul> <li>Prisma schema</li> <li>API endpoints (tRPC or REST)</li> <li>Server Actions</li> <li>Validation schemas</li> <li>Authorization middleware</li> </ul> <p>Use when:</p> <ul> <li>Creating APIs</li> <li>Implementing business logic</li> <li>Database operations</li> <li>Authentication/authorization</li> </ul>"},{"location":"architecture/workflow-commands/#review-phase","title":"Review Phase","text":""},{"location":"architecture/workflow-commands/#mcp-review-code","title":"/mcp-review-code","text":"<p>Purpose: Comprehensive code quality review</p> <p>Invokes: <code>code-reviewer</code> agent</p> <p>Time: 15-25 minutes</p> <p>Reviews:</p> <ul> <li> <p>Architecture</p> <ul> <li>Component patterns</li> <li>Data flow</li> <li>Separation of concerns</li> <li>Server vs Client components</li> </ul> </li> <li> <p>TypeScript</p> <ul> <li>Type safety</li> <li>No <code>any</code> usage</li> <li>Proper interfaces</li> <li>Generic usage</li> </ul> </li> <li> <p>React/Next.js Best Practices</p> <ul> <li>Hook rules</li> <li>Component composition</li> <li>Performance patterns</li> <li>Caching strategies</li> </ul> </li> <li> <p>Security</p> <ul> <li>Authentication checks</li> <li>Input validation</li> <li>XSS prevention</li> <li>CSRF protection</li> </ul> </li> <li> <p>Performance</p> <ul> <li>N+1 query prevention</li> <li>Unnecessary re-renders</li> <li>Code splitting</li> <li>Caching</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Try-catch blocks</li> <li>Error boundaries</li> <li>User-friendly messages</li> <li>Logging</li> </ul> </li> <li> <p>Code Quality</p> <ul> <li>DRY principle</li> <li>Clean code</li> <li>Naming conventions</li> <li>Comments</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Issues list with severity</li> <li>Improvement suggestions</li> <li>Refactoring recommendations</li> <li>Approval status</li> </ul> <p>Use when:</p> <ul> <li>After implementing features</li> <li>Before merging PRs</li> <li>Ensuring code quality</li> <li>Learning best practices</li> </ul>"},{"location":"architecture/workflow-commands/#mcp-review-security","title":"/mcp-review-security","text":"<p>Purpose: Security audit based on OWASP Top 10</p> <p>Invokes: <code>security</code> agent</p> <p>Time: 30-45 minutes</p> <p>Audits:</p> <ul> <li> <p>OWASP Top 10 Compliance</p> <ul> <li>Broken Access Control</li> <li>Cryptographic Failures</li> <li>Injection</li> <li>Insecure Design</li> <li>Security Misconfiguration</li> <li>Vulnerable Components</li> <li>Authentication Failures</li> <li>Software and Data Integrity Failures</li> <li>Security Logging Failures</li> <li>Server-Side Request Forgery</li> </ul> </li> <li> <p>Authentication &amp; Authorization</p> <ul> <li>Session management</li> <li>Password security</li> <li>OAuth implementation</li> <li>JWT validation</li> <li>Role-based access control</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>SQL injection prevention</li> <li>XSS prevention</li> <li>Command injection</li> <li>Path traversal</li> </ul> </li> <li> <p>Data Protection</p> <ul> <li>Encryption at rest</li> <li>Encryption in transit</li> <li>Sensitive data exposure</li> <li>PII handling</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Security issues by severity (Critical, High, Medium, Low)</li> <li>Remediation steps</li> <li>Code examples for fixes</li> <li>Compliance checklist</li> </ul> <p>Use when:</p> <ul> <li>Before production deployment</li> <li>After authentication changes</li> <li>Regular security audits</li> <li>Compliance requirements</li> </ul>"},{"location":"architecture/workflow-commands/#mcp-review-performance","title":"/mcp-review-performance","text":"<p>Purpose: Performance audit and Core Web Vitals optimization</p> <p>Invokes: <code>performance</code> agent</p> <p>Time: 20-30 minutes</p> <p>Analyzes:</p> <ul> <li> <p>Core Web Vitals</p> <ul> <li>Largest Contentful Paint (LCP)</li> <li>First Input Delay (FID) / Interaction to Next Paint (INP)</li> <li>Cumulative Layout Shift (CLS)</li> </ul> </li> <li> <p>Bundle Size</p> <ul> <li>JavaScript bundle analysis</li> <li>CSS bundle size</li> <li>Third-party dependencies</li> <li>Code splitting opportunities</li> </ul> </li> <li> <p>Database Performance</p> <ul> <li>Query optimization</li> <li>N+1 query detection</li> <li>Index recommendations</li> <li>Connection pooling</li> </ul> </li> <li> <p>Caching Strategy</p> <ul> <li>Browser caching</li> <li>CDN caching</li> <li>Server-side caching</li> <li>Redis usage</li> </ul> </li> <li> <p>Image Optimization</p> <ul> <li>Image format recommendations</li> <li>Lazy loading</li> <li>Responsive images</li> <li>next/image usage</li> </ul> </li> <li> <p>Font Optimization</p> <ul> <li>Font loading strategy</li> <li>next/font usage</li> <li>Font subsetting</li> </ul> </li> <li> <p>Code Splitting</p> <ul> <li>Dynamic imports</li> <li>Route-based splitting</li> <li>Component lazy loading</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Performance scores</li> <li>Bottleneck identification</li> <li>Optimization recommendations</li> <li>Implementation examples</li> </ul> <p>Use when:</p> <ul> <li>Performance issues detected</li> <li>Before major releases</li> <li>Regular optimization cycles</li> <li>Improving user experience</li> </ul>"},{"location":"architecture/workflow-commands/#qa-phase","title":"QA Phase","text":""},{"location":"architecture/workflow-commands/#mcp-qa-e2e","title":"/mcp-qa-e2e","text":"<p>Purpose: Create comprehensive end-to-end tests with Playwright</p> <p>Invokes: <code>qa-tester</code> agent</p> <p>Time: 45-60 minutes</p> <p>Creates:</p> <ul> <li> <p>Test Planning</p> <ul> <li>Critical user flows</li> <li>Test scenarios</li> <li>Edge cases</li> <li>Error conditions</li> </ul> </li> <li> <p>Playwright Setup</p> <ul> <li>Configuration</li> <li>Browser setup</li> <li>Test utilities</li> <li>CI integration</li> </ul> </li> <li> <p>Page Object Model</p> <ul> <li>Page objects</li> <li>Locator strategies</li> <li>Reusable components</li> <li>Helper methods</li> </ul> </li> <li> <p>Authentication Helpers</p> <ul> <li>Login utilities</li> <li>Session management</li> <li>Role-based testing</li> <li>Token handling</li> </ul> </li> <li> <p>E2E Tests</p> <ul> <li>Authentication flows</li> <li>CRUD operations</li> <li>Form submissions</li> <li>Error handling</li> <li>Edge cases</li> </ul> </li> <li> <p>Test Data Management</p> <ul> <li>Test fixtures</li> <li>Database seeding</li> <li>Cleanup strategies</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Playwright configuration</li> <li>Page object models</li> <li>Test suites</li> <li>CI/CD integration</li> <li>Running instructions</li> </ul> <p>Use when:</p> <ul> <li>Need automated testing</li> <li>Testing critical flows</li> <li>Regression prevention</li> <li>CI/CD pipeline setup</li> </ul>"},{"location":"architecture/workflow-commands/#documentation-phase","title":"Documentation Phase","text":""},{"location":"architecture/workflow-commands/#mcp-write-docs","title":"/mcp-write-docs","text":"<p>Purpose: Create comprehensive technical documentation</p> <p>Invokes: <code>tech-writer</code> agent</p> <p>Time: 60-90 minutes</p> <p>Creates:</p> <ul> <li> <p>Documentation Planning</p> <ul> <li>README structure</li> <li>API documentation</li> <li>User guides</li> <li>Architecture docs</li> </ul> </li> <li> <p>MkDocs Material Setup</p> <ul> <li>Configuration</li> <li>Theme customization</li> <li>Navigation structure</li> <li>Search setup</li> </ul> </li> <li> <p>README.md</p> <ul> <li>Project overview</li> <li>Quick start</li> <li>Installation</li> <li>Usage examples</li> </ul> </li> <li> <p>API Reference</p> <ul> <li>Endpoint documentation</li> <li>Request/response examples</li> <li>Error codes</li> <li>Authentication</li> </ul> </li> <li> <p>User Guides</p> <ul> <li>Getting started</li> <li>Feature tutorials</li> <li>How-to guides</li> <li>Troubleshooting</li> </ul> </li> <li> <p>Architecture Documentation</p> <ul> <li>System diagrams (Mermaid)</li> <li>Component diagrams</li> <li>Data flow</li> <li>Deployment architecture</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Complete documentation site</li> <li>README.md</li> <li>API reference</li> <li>User guides</li> <li>Architecture docs</li> </ul> <p>Use when:</p> <ul> <li>Documenting projects</li> <li>Creating API docs</li> <li>Building documentation sites</li> <li>Onboarding documentation</li> </ul>"},{"location":"architecture/workflow-commands/#deployment-phase","title":"Deployment Phase","text":""},{"location":"architecture/workflow-commands/#mcp-deploy","title":"/mcp-deploy","text":"<p>Purpose: Production deployment with CI/CD pipeline</p> <p>Invokes: <code>deployment</code> agent</p> <p>Time: 30-45 minutes</p> <p>Handles:</p> <ul> <li> <p>Pre-deployment Checklist</p> <ul> <li>Environment variables</li> <li>Database migrations</li> <li>Build verification</li> <li>Security audit</li> </ul> </li> <li> <p>Vercel Deployment (Recommended)</p> <ul> <li>Project setup</li> <li>Environment configuration</li> <li>Domain setup</li> <li>Preview deployments</li> </ul> </li> <li> <p>Docker Deployment (Alternative)</p> <ul> <li>Dockerfile creation</li> <li>Docker Compose</li> <li>Multi-stage builds</li> <li>Container registry</li> </ul> </li> <li> <p>GitHub Actions CI/CD</p> <ul> <li>Workflow configuration</li> <li>Build pipeline</li> <li>Test automation</li> <li>Deployment automation</li> </ul> </li> <li> <p>Database Migrations</p> <ul> <li>Migration strategy</li> <li>Rollback plan</li> <li>Zero-downtime migrations</li> <li>Data validation</li> </ul> </li> <li> <p>Post-deployment</p> <ul> <li>Verification steps</li> <li>Smoke tests</li> <li>Monitoring setup</li> <li>Rollback procedure</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Deployment configuration</li> <li>CI/CD pipelines</li> <li>Environment setup</li> <li>Deployment documentation</li> <li>Rollback procedures</li> </ul> <p>Use when:</p> <ul> <li>Deploying to production</li> <li>Setting up CI/CD</li> <li>Infrastructure as code</li> <li>Automation setup</li> </ul>"},{"location":"architecture/workflow-commands/#workflow-patterns","title":"Workflow Patterns","text":""},{"location":"architecture/workflow-commands/#pattern-1-new-feature-development","title":"Pattern 1: New Feature Development","text":"<p>Complete feature from design to deployment:</p> <pre><code>/mcp-design-nextjs              # Design architecture\n/mcp-implement-fullstack        # Build feature\n/mcp-review-code               # Review quality\n/mcp-review-security           # Security audit\n/mcp-qa-e2e                    # Write tests\n/mcp-write-docs                # Document feature\n/mcp-deploy                    # Deploy to production\n</code></pre> <p>Time: 4-6 hours</p>"},{"location":"architecture/workflow-commands/#pattern-2-frontend-only-feature","title":"Pattern 2: Frontend-Only Feature","text":"<p>UI-focused development:</p> <pre><code>/mcp-design-nextjs              # Plan UI structure\n/mcp-implement-frontend         # Build components\n/mcp-review-code               # Review quality\n/mcp-qa-e2e                    # Test UI flows\n</code></pre> <p>Time: 2-3 hours</p>"},{"location":"architecture/workflow-commands/#pattern-3-backend-api-development","title":"Pattern 3: Backend API Development","text":"<p>API-focused development:</p> <pre><code>/mcp-design-architecture        # Design API architecture\n/mcp-implement-backend          # Build API\n/mcp-review-code               # Review quality\n/mcp-review-security           # Security audit\n</code></pre> <p>Time: 2-3 hours</p>"},{"location":"architecture/workflow-commands/#pattern-4-performance-optimization","title":"Pattern 4: Performance Optimization","text":"<p>Optimize existing application:</p> <pre><code>/mcp-review-performance        # Identify issues\n/mcp-implement-frontend        # Optimize UI (if needed)\n/mcp-implement-backend         # Optimize queries (if needed)\n/mcp-review-performance        # Verify improvements\n</code></pre> <p>Time: 2-4 hours</p>"},{"location":"architecture/workflow-commands/#pattern-5-security-hardening","title":"Pattern 5: Security Hardening","text":"<p>Security improvement cycle:</p> <pre><code>/mcp-review-security           # Audit current state\n/mcp-implement-backend         # Fix backend issues\n/mcp-implement-frontend        # Fix frontend issues\n/mcp-review-security          # Re-audit\n/mcp-qa-e2e                   # Test security features\n</code></pre> <p>Time: 3-4 hours</p>"},{"location":"architecture/workflow-commands/#command-sequencing-best-practices","title":"Command Sequencing Best Practices","text":""},{"location":"architecture/workflow-commands/#good-sequencing","title":"Good Sequencing","text":"<p>Always design before implementing:</p> <pre><code># Good\n/mcp-design-nextjs\n/mcp-implement-fullstack\n/mcp-review-code\n\n# Not ideal\n/mcp-implement-fullstack    # Implementing without design\n/mcp-design-nextjs         # Design should come first\n</code></pre>"},{"location":"architecture/workflow-commands/#iterative-development","title":"Iterative Development","text":"<p>Commands can be run multiple times:</p> <pre><code>/mcp-implement-frontend        # First iteration\n/mcp-review-code              # Find issues\n/mcp-implement-frontend        # Fix issues\n/mcp-review-code              # Verify fixes\n</code></pre>"},{"location":"architecture/workflow-commands/#multi-review-approach","title":"Multi-Review Approach","text":"<p>Use multiple review commands:</p> <pre><code>/mcp-implement-fullstack       # Implementation\n/mcp-review-code              # Code quality\n/mcp-review-security          # Security\n/mcp-review-performance       # Performance\n</code></pre>"},{"location":"architecture/workflow-commands/#tips-for-effective-usage","title":"Tips for Effective Usage","text":""},{"location":"architecture/workflow-commands/#1-read-the-checklist","title":"1. Read the Checklist","text":"<p>Each command provides comprehensive checklists. Review them before starting.</p>"},{"location":"architecture/workflow-commands/#2-budget-time","title":"2. Budget Time","text":"<p>Commands include time estimates. Plan accordingly.</p>"},{"location":"architecture/workflow-commands/#3-follow-the-flow","title":"3. Follow the Flow","text":"<p>Use commands in logical sequence (design \u2192 implement \u2192 review \u2192 test \u2192 deploy).</p>"},{"location":"architecture/workflow-commands/#4-iterate-as-needed","title":"4. Iterate as Needed","text":"<p>Don't hesitate to repeat commands to improve quality.</p>"},{"location":"architecture/workflow-commands/#5-combine-with-direct-invocation","title":"5. Combine with Direct Invocation","text":"<p>Mix workflow commands with direct agent invocation:</p> <pre><code>/mcp-implement-fullstack       # Guided implementation\nUse performance to optimize specific query  # Direct optimization\n/mcp-review-code              # Final review\n</code></pre>"},{"location":"architecture/workflow-commands/#when-to-use-commands-vs-direct-agent-invocation","title":"When to Use Commands vs Direct Agent Invocation","text":""},{"location":"architecture/workflow-commands/#use-workflow-commands-when","title":"Use Workflow Commands When:","text":"<ul> <li>Learning new patterns or technologies</li> <li>Want comprehensive checklists</li> <li>Ensuring nothing is missed</li> <li>Need structured guidance</li> <li>Building complete features</li> <li>Onboarding new developers</li> </ul>"},{"location":"architecture/workflow-commands/#use-direct-agent-invocation-when","title":"Use Direct Agent Invocation When:","text":"<ul> <li>Quick, specific tasks</li> <li>Experienced with the workflow</li> <li>Know exactly what's needed</li> <li>Small fixes or changes</li> <li>Prototyping or exploring</li> </ul>"},{"location":"architecture/workflow-commands/#customization","title":"Customization","text":"<p>You can create custom workflow commands by adding markdown files to <code>.claude/commands/</code>:</p> <pre><code>---\ndescription: Your custom workflow command\n---\n\n# Custom Workflow\n\nYour step-by-step guidance here...\n\n## Checklist\n\n- [ ] Step 1\n- [ ] Step 2\n- [ ] Step 3\n\n## Agents to Use\n\n- Use agent-name for specific task\n</code></pre> <p>See existing commands in <code>.claude/commands/</code> for examples.</p>"},{"location":"architecture/workflow-commands/#summary","title":"Summary","text":"<p>Workflow commands provide:</p> <ul> <li>Structure: Step-by-step guidance</li> <li>Completeness: Comprehensive checklists</li> <li>Quality: Built-in best practices</li> <li>Efficiency: Faster than manual steps</li> <li>Learning: Educational for new patterns</li> </ul>"},{"location":"architecture/workflow-commands/#next-steps","title":"Next Steps","text":"<ul> <li>View workflow examples</li> <li>Learn best practices</li> <li>Explore agents</li> <li>See architecture overview</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide explains how to install the MCP Sub-Agents system with the two-tier architecture.</p>"},{"location":"getting-started/installation/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Install all agents and workflow commands with a single command:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/rcdelacruz/mcp-sub-agents/main/install.sh | bash\n</code></pre> <p>This will:</p> <ol> <li>Auto-download the repository to a temporary directory</li> <li>Copy agents to <code>~/.claude/agents/</code> (preserving directory structure)</li> <li>Copy workflow commands to <code>~/.claude/commands/</code></li> <li>Clean up temporary files</li> <li>Show installation summary</li> </ol> <p>No Repository Clone Required</p> <p>The installation script handles everything automatically. You don't need to clone the repository manually.</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-remote-install-no-clone","title":"Method 1: Remote Install (No Clone)","text":"<p>The recommended one-line installation:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/rcdelacruz/mcp-sub-agents/main/install.sh | bash\n</code></pre> <p>Requirements:</p> <ul> <li>Git installed on your system</li> <li>Internet connection</li> <li>Bash shell</li> </ul>"},{"location":"getting-started/installation/#method-2-manual-installation-global","title":"Method 2: Manual Installation (Global)","text":"<p>For more control over the installation process:</p> <pre><code># Clone repository\ngit clone https://github.com/rcdelacruz/mcp-sub-agents.git\ncd mcp-sub-agents\n\n# Copy agents (preserves subdirectories)\nmkdir -p ~/.claude/agents\ncp -r agents/* ~/.claude/agents/\n\n# Copy workflow commands\nmkdir -p ~/.claude/commands\ncp -r .claude/commands/* ~/.claude/commands/\n\n# Verify installation\nls -R ~/.claude/agents/\nls ~/.claude/commands/\n</code></pre>"},{"location":"getting-started/installation/#method-3-project-specific-installation","title":"Method 3: Project-Specific Installation","text":"<p>Install agents for a specific project only:</p> <pre><code># In your project directory\ngit clone https://github.com/rcdelacruz/mcp-sub-agents.git\ncd mcp-sub-agents\n\n# Copy to project's .claude directory\nmkdir -p .claude/agents .claude/commands\ncp -r agents/* .claude/agents/\ncp -r .claude/commands/* .claude/commands/\n\n# Verify\nls -R .claude/agents/\nls .claude/commands/\n</code></pre>"},{"location":"getting-started/installation/#method-4-symlink-development","title":"Method 4: Symlink (Development)","text":"<p>For development or to auto-sync with updates:</p> <pre><code># Clone repository\ngit clone https://github.com/rcdelacruz/mcp-sub-agents.git\ncd mcp-sub-agents\n\n# Create symlinks (changes sync automatically)\nmkdir -p ~/.claude\nln -s \"$(pwd)/agents\" ~/.claude/agents\nln -s \"$(pwd)/.claude/commands\" ~/.claude/commands\n\n# Verify\nls -la ~/.claude/\n</code></pre>"},{"location":"getting-started/installation/#directory-structure","title":"Directory Structure","text":"<p>After installation, your directory structure should look like this:</p> <pre><code>~/.claude/\n\u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 savants/\n\u2502   \u2502   \u251c\u2500\u2500 savant-fullstack-js.md\n\u2502   \u2502   \u2514\u2500\u2500 savant-java-spring.md\n\u2502   \u251c\u2500\u2500 javascript/\n\u2502   \u2502   \u251c\u2500\u2500 fullstack-nextjs.md\n\u2502   \u2502   \u251c\u2500\u2500 frontend-ui.md\n\u2502   \u2502   \u2514\u2500\u2500 backend-api.md\n\u2502   \u2514\u2500\u2500 cross-cutting/\n\u2502       \u251c\u2500\u2500 architect.md\n\u2502       \u251c\u2500\u2500 code-reviewer.md\n\u2502       \u251c\u2500\u2500 database.md\n\u2502       \u251c\u2500\u2500 deployment.md\n\u2502       \u251c\u2500\u2500 monitoring.md\n\u2502       \u251c\u2500\u2500 performance.md\n\u2502       \u251c\u2500\u2500 qa-tester.md\n\u2502       \u251c\u2500\u2500 security.md\n\u2502       \u2514\u2500\u2500 tech-writer.md\n\u2514\u2500\u2500 commands/\n    \u251c\u2500\u2500 mcp-design-architecture.md\n    \u251c\u2500\u2500 mcp-design-nextjs.md\n    \u251c\u2500\u2500 mcp-implement-fullstack.md\n    \u251c\u2500\u2500 mcp-implement-frontend.md\n    \u251c\u2500\u2500 mcp-implement-backend.md\n    \u251c\u2500\u2500 mcp-review-code.md\n    \u251c\u2500\u2500 mcp-review-security.md\n    \u251c\u2500\u2500 mcp-review-performance.md\n    \u251c\u2500\u2500 mcp-qa-e2e.md\n    \u251c\u2500\u2500 mcp-write-docs.md\n    \u2514\u2500\u2500 mcp-deploy.md\n</code></pre>"},{"location":"getting-started/installation/#understanding-agent-discovery","title":"Understanding Agent Discovery","text":"<p>How Agent Discovery Works</p> <p>Claude Code finds agents by the <code>name:</code> field in their frontmatter, not by file path. It recursively searches all subdirectories in <code>~/.claude/agents/</code>.</p> <p>Agent frontmatter example:</p> <pre><code>---\nname: fullstack-js-savant\ndescription: Master expert in fullstack JavaScript/TypeScript...\n---\n</code></pre> <p>The agent can be located anywhere:</p> <ul> <li><code>agents/fullstack-js-savant.md</code> - Works</li> <li><code>agents/savants/savant-fullstack-js.md</code> - Works</li> <li><code>agents/any/nested/path/agent.md</code> - Works</li> </ul> <p>What matters is the <code>name</code> field in the frontmatter.</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#run-verification-script","title":"Run Verification Script","text":"<p>After installation, verify that all agents and commands are properly installed:</p> <pre><code>cd mcp-sub-agents\n./verify-agents.sh\n</code></pre> <p>Expected output:</p> <pre><code>\ud83d\udd0d Verifying Agent Installation...\n\u2705 agents/ directory exists\n\ud83d\udcca Total agents found: 14\n\n\ud83d\udccb Agent Names (from frontmatter):\n  \u2713 fullstack-js-savant\n  \u2713 java-spring-savant\n  \u2713 fullstack-nextjs\n  \u2713 frontend-ui\n  \u2713 backend-api\n  \u2713 code-reviewer\n  \u2713 qa-tester\n  \u2713 architect\n  \u2713 performance\n  \u2713 security\n  \u2713 deployment\n  \u2713 monitoring\n  \u2713 database\n  \u2713 tech-writer\n\n\u2705 Found 11 workflow commands\n  \u2713 /mcp-design-architecture\n  \u2713 /mcp-design-nextjs\n  \u2713 /mcp-implement-fullstack\n  \u2713 /mcp-implement-frontend\n  \u2713 /mcp-implement-backend\n  \u2713 /mcp-review-code\n  \u2713 /mcp-review-security\n  \u2713 /mcp-review-performance\n  \u2713 /mcp-qa-e2e\n  \u2713 /mcp-write-docs\n  \u2713 /mcp-deploy\n\n\u2705 Verification complete!\n</code></pre>"},{"location":"getting-started/installation/#manual-verification","title":"Manual Verification","text":"<p>Check installation manually:</p> <pre><code># Check agents are installed\nls -R ~/.claude/agents/\n\n# Check commands are installed\nls ~/.claude/commands/\n\n# Count agents (should show 14)\nfind ~/.claude/agents -name \"*.md\" | wc -l\n\n# Count commands (should show 11)\nfind ~/.claude/commands -name \"*.md\" | wc -l\n</code></pre>"},{"location":"getting-started/installation/#test-in-claude-code","title":"Test in Claude Code","text":"<p>Test that agents and commands are accessible:</p> <pre><code># Test agent invocation\nUse fullstack-js-savant to explain the two-tier architecture\n\n# Test workflow command\n/mcp-design-nextjs\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#agents-not-found","title":"Agents Not Found","text":"<p>Problem: Claude Code says \"Agent not found\"</p> <p>Solutions:</p> <ol> <li> <p>Check installation location:     <pre><code>ls -R ~/.claude/agents/\n</code></pre>     Should show agents in subdirectories.</p> </li> <li> <p>Verify agent names in frontmatter:     <pre><code>grep \"^name:\" ~/.claude/agents/**/*.md\n</code></pre>     Agent names must match what commands reference.</p> </li> <li> <p>Check frontmatter format:     <pre><code>---\nname: agent-name      # Must be on its own line\ndescription: ...\n---\n</code></pre></p> </li> <li> <p>Reinstall:     <pre><code>rm -rf ~/.claude/agents ~/.claude/commands\n# Run installation again\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#commands-not-working","title":"Commands Not Working","text":"<p>Problem: <code>/command-name</code> doesn't work</p> <p>Solutions:</p> <ol> <li> <p>Check commands directory:     <pre><code>ls ~/.claude/commands/\n</code></pre></p> </li> <li> <p>Verify command files have <code>.md</code> extension:     <pre><code>ls ~/.claude/commands/*.md\n</code></pre></p> </li> <li> <p>Check frontmatter format:     <pre><code>---\ndescription: Command description\n---\n</code></pre></p> </li> <li> <p>Restart Claude Code (commands are loaded at startup)</p> </li> </ol>"},{"location":"getting-started/installation/#permission-issues","title":"Permission Issues","text":"<p>Problem: Permission denied during installation</p> <p>Solutions:</p> <pre><code># Fix permissions for Claude directory\nchmod -R 755 ~/.claude/\n\n# If using symlinks, verify source directory permissions\nchmod -R 755 /path/to/mcp-sub-agents/\n</code></pre>"},{"location":"getting-started/installation/#subdirectory-issues","title":"Subdirectory Issues","text":"<p>Problem: Agents in subdirectories not working</p> <p>Solution: Claude Code DOES support subdirectories. If having issues:</p> <ol> <li> <p>Check file permissions:     <pre><code>chmod -R 755 ~/.claude/agents\n</code></pre></p> </li> <li> <p>Verify no broken symlinks:     <pre><code>find ~/.claude/agents -type l -exec test ! -e {} \\; -print\n</code></pre></p> </li> <li> <p>Alternative - flatten structure (if needed):     <pre><code>mkdir -p ~/.claude/agents-flat\nfind agents -name \"*.md\" -exec cp {} ~/.claude/agents-flat/ \\;\nmv ~/.claude/agents-flat ~/.claude/agents\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#updating-agents","title":"Updating Agents","text":""},{"location":"getting-started/installation/#update-global-installation","title":"Update Global Installation","text":"<pre><code>cd mcp-sub-agents\ngit pull origin main\ncp -r agents/* ~/.claude/agents/\ncp -r .claude/commands/* ~/.claude/commands/\n</code></pre>"},{"location":"getting-started/installation/#update-with-symlinks","title":"Update with Symlinks","text":"<pre><code>cd mcp-sub-agents\ngit pull origin main\n# Changes automatically reflected via symlinks\n</code></pre>"},{"location":"getting-started/installation/#create-update-alias","title":"Create Update Alias","text":"<p>Add to your shell profile (<code>~/.bashrc</code> or <code>~/.zshrc</code>):</p> <pre><code>alias update-agents='cd ~/mcp-sub-agents &amp;&amp; git pull &amp;&amp; cp -r agents/* ~/.claude/agents/ &amp;&amp; cp -r .claude/commands/* ~/.claude/commands/'\n</code></pre> <p>Then just run:</p> <pre><code>update-agents\n</code></pre>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":""},{"location":"getting-started/installation/#remove-global-installation","title":"Remove Global Installation","text":"<pre><code>rm -rf ~/.claude/agents\nrm -rf ~/.claude/commands\n</code></pre>"},{"location":"getting-started/installation/#remove-project-specific-installation","title":"Remove Project-Specific Installation","text":"<pre><code>rm -rf .claude/agents\nrm -rf .claude/commands\n</code></pre>"},{"location":"getting-started/installation/#remove-symlinks","title":"Remove Symlinks","text":"<pre><code>rm ~/.claude/agents\nrm ~/.claude/commands\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>Default location works out of the box:</p> <pre><code>~/.claude/\n</code></pre>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Same as macOS:</p> <pre><code>~/.claude/\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Use PowerShell:</p> <pre><code># Installation location\n$env:USERPROFILE\\.claude\\\n\n# Copy agents\nCopy-Item -Recurse agents\\* $env:USERPROFILE\\.claude\\agents\\\n\n# Copy commands\nCopy-Item -Recurse .claude\\commands\\* $env:USERPROFILE\\.claude\\commands\\\n</code></pre>"},{"location":"getting-started/installation/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/installation/#global-vs-project-specific","title":"Global vs Project-Specific","text":"<p>Use Global Installation When:</p> <ul> <li>You want agents available across all projects</li> <li>You're the only developer</li> <li>You want consistent agent versions</li> </ul> <p>Use Project-Specific Installation When:</p> <ul> <li>Team needs same agent versions</li> <li>Project has custom agents</li> <li>Different projects need different agents</li> <li>Version control for agents is needed</li> </ul>"},{"location":"getting-started/installation/#keeping-agents-updated","title":"Keeping Agents Updated","text":"<p>Regularly update to get the latest improvements:</p> <pre><code># Weekly update\ncd ~/mcp-sub-agents\ngit pull\ncp -r agents/* ~/.claude/agents/\ncp -r .claude/commands/* ~/.claude/commands/\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Quick Start Guide - Learn basic usage</li> <li>Architecture Overview - Understand the system</li> <li>Workflow Commands - Learn guided workflows</li> <li>Best Practices - Effective usage patterns</li> </ol>"},{"location":"getting-started/installation/#support","title":"Support","text":"<p>If you encounter issues:</p> <ol> <li>Run verification script: <code>./verify-agents.sh</code></li> <li>Check FAQ for common questions</li> <li>Review troubleshooting section</li> <li>Open an issue: GitHub Issues</li> </ol>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get started with MCP Sub-Agents in minutes. This guide walks you through your first workflows and basic usage patterns.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Code installed</li> <li>MCP Sub-Agents installed (installation guide)</li> <li>Basic understanding of Next.js and TypeScript</li> </ul>"},{"location":"getting-started/quick-start/#your-first-workflow","title":"Your First Workflow","text":"<p>Let's build a simple blog post feature using the two-tier agent system.</p>"},{"location":"getting-started/quick-start/#step-1-architecture-design","title":"Step 1: Architecture Design","text":"<p>Use a savant agent to design the architecture:</p> <pre><code>Use fullstack-js-savant to design a blog post feature with create, read, and list functionality\n</code></pre> <p>What the savant will provide:</p> <ul> <li>Database schema design</li> <li>API architecture decisions</li> <li>Component structure</li> <li>Authentication requirements</li> <li>Technology recommendations</li> </ul> <p>Expected output:</p> <pre><code>## Blog Feature Architecture\n\n### Database Schema (Prisma)\n- Post table with id, title, content, authorId, published, createdAt\n- Relations to User table\n\n### API Layer\n- tRPC router for type-safe API\n- Server Actions for mutations\n- Route Handlers for REST endpoints (optional)\n\n### Frontend Components\n- Server Components for listing and displaying posts\n- Client Components for interactive forms\n- Optimistic updates for better UX\n\n### Pages Structure\n- /blog - List all posts (Server Component)\n- /blog/[slug] - Single post page (Server Component)\n- /blog/new - Create post form (Client Component)\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-implement-database-schema","title":"Step 2: Implement Database Schema","text":"<p>Use the database specialist:</p> <pre><code>Use database to implement the blog post Prisma schema with User relation\n</code></pre> <p>What you'll get:</p> <pre><code>// prisma/schema.prisma\nmodel Post {\n  id          String   @id @default(cuid())\n  title       String\n  slug        String   @unique\n  content     String   @db.Text\n  excerpt     String?\n  published   Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  authorId    String\n  author      User     @relation(fields: [authorId], references: [id])\n\n  @@index([authorId])\n  @@index([published])\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-build-the-ui","title":"Step 3: Build the UI","text":"<p>Use the frontend-ui specialist:</p> <pre><code>Use frontend-ui to create a blog post form with shadcn/ui using react-hook-form and Zod validation\n</code></pre> <p>What you'll get:</p> <ul> <li>Form component with shadcn/ui</li> <li>Zod validation schema</li> <li>Accessible form fields</li> <li>Loading and error states</li> <li>Responsive design</li> </ul>"},{"location":"getting-started/quick-start/#step-4-create-the-api","title":"Step 4: Create the API","text":"<p>Use the backend-api specialist:</p> <pre><code>Use backend-api to create a tRPC router for blog posts with create, list, and get by slug\n</code></pre> <p>What you'll get:</p> <ul> <li>Type-safe tRPC router</li> <li>Input validation with Zod</li> <li>Authorization checks</li> <li>Error handling</li> </ul>"},{"location":"getting-started/quick-start/#step-5-code-review","title":"Step 5: Code Review","text":"<p>Use the code-reviewer specialist:</p> <pre><code>Use code-reviewer to review my blog post implementation for best practices and security\n</code></pre> <p>What you'll get:</p> <ul> <li>Code quality assessment</li> <li>Security vulnerability checks</li> <li>Performance recommendations</li> <li>Best practice suggestions</li> <li>Refactoring opportunities</li> </ul>"},{"location":"getting-started/quick-start/#using-workflow-commands","title":"Using Workflow Commands","text":"<p>For a more guided experience, use workflow commands:</p>"},{"location":"getting-started/quick-start/#design-phase","title":"Design Phase","text":"<pre><code>/mcp-design-nextjs\n</code></pre> <p>This command will guide you through:</p> <ol> <li>Requirements analysis</li> <li>Route structure planning</li> <li>Component hierarchy design</li> <li>Data flow architecture</li> <li>API design</li> <li>Authentication planning</li> </ol> <p>Time: 20-30 minutes</p>"},{"location":"getting-started/quick-start/#implementation-phase","title":"Implementation Phase","text":"<pre><code>/mcp-implement-fullstack\n</code></pre> <p>This command orchestrates:</p> <ol> <li>Database schema creation</li> <li>API implementation</li> <li>Server Component development</li> <li>Client Component creation</li> <li>Integration testing</li> </ol> <p>Time: 60-90 minutes</p>"},{"location":"getting-started/quick-start/#review-phase","title":"Review Phase","text":"<pre><code>/mcp-review-code\n</code></pre> <p>Comprehensive code review covering:</p> <ul> <li>Architecture patterns</li> <li>Type safety</li> <li>Security issues</li> <li>Performance problems</li> <li>Code quality</li> </ul> <p>Time: 15-25 minutes</p>"},{"location":"getting-started/quick-start/#qa-phase","title":"QA Phase","text":"<pre><code>/mcp-qa-e2e\n</code></pre> <p>Creates E2E tests with Playwright:</p> <ul> <li>Critical user flows</li> <li>Authentication tests</li> <li>CRUD operations</li> <li>Error handling</li> <li>Edge cases</li> </ul> <p>Time: 45-60 minutes</p>"},{"location":"getting-started/quick-start/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"getting-started/quick-start/#pattern-1-quick-implementation","title":"Pattern 1: Quick Implementation","text":"<p>For experienced developers who know what they want:</p> <pre><code># Direct specialist usage\nUse fullstack-nextjs to build a user profile page with Server Components\nUse frontend-ui to create a settings form with shadcn/ui\nUse backend-api to add a PUT /api/user endpoint\n</code></pre>"},{"location":"getting-started/quick-start/#pattern-2-guided-development","title":"Pattern 2: Guided Development","text":"<p>For learning or ensuring best practices:</p> <pre><code># Use workflow commands\n/mcp-design-nextjs          # Plan first\n/mcp-implement-frontend     # Build step-by-step\n/mcp-review-code           # Ensure quality\n</code></pre>"},{"location":"getting-started/quick-start/#pattern-3-architecture-first","title":"Pattern 3: Architecture-First","text":"<p>For complex features:</p> <pre><code># Start with savant\nUse fullstack-js-savant to design a real-time chat system\n\n# Implement with specialists\nUse backend-api to implement WebSocket server\nUse frontend-ui to create chat UI components\nUse database to design message storage\n\n# Review with specialists\nUse security to audit the chat implementation\nUse performance to optimize real-time updates\n</code></pre>"},{"location":"getting-started/quick-start/#pattern-4-problem-solving","title":"Pattern 4: Problem-Solving","text":"<p>For debugging or optimization:</p> <pre><code># Identify issues\nUse code-reviewer to find issues in my authentication flow\nUse performance to analyze slow database queries\n\n# Fix issues\nUse backend-api to optimize the query\nUse security to fix authentication vulnerabilities\n\n# Verify fixes\nUse qa-tester to write tests for the fixed code\n</code></pre>"},{"location":"getting-started/quick-start/#example-workflows","title":"Example Workflows","text":""},{"location":"getting-started/quick-start/#building-a-login-system","title":"Building a Login System","text":"<pre><code># 1. Architecture\nUse fullstack-js-savant to design authentication with NextAuth.js and GitHub OAuth\n\n# 2. Implementation\nUse backend-api to implement NextAuth.js configuration\nUse frontend-ui to create login and signup forms\n\n# 3. Security Review\n/mcp-review-security\n\n# 4. Testing\nUse qa-tester to write E2E tests for authentication flow\n</code></pre>"},{"location":"getting-started/quick-start/#creating-a-dashboard","title":"Creating a Dashboard","text":"<pre><code># 1. Design\n/mcp-design-nextjs\n\n# 2. Build Components\nUse fullstack-nextjs to create the dashboard layout with App Router\nUse frontend-ui to build data visualization components with charts\n\n# 3. Add Data Layer\nUse database to create analytics schema\nUse backend-api to create analytics API endpoints\n\n# 4. Review\n/mcp-review-code\n/mcp-review-performance\n</code></pre>"},{"location":"getting-started/quick-start/#optimizing-performance","title":"Optimizing Performance","text":"<pre><code># 1. Audit\n/mcp-review-performance\n\n# 2. Fix Issues\nUse fullstack-nextjs to implement Suspense and streaming\nUse performance to optimize Core Web Vitals\nUse database to add database indexes\n\n# 3. Verify\n/mcp-review-performance\n</code></pre>"},{"location":"getting-started/quick-start/#understanding-agent-responses","title":"Understanding Agent Responses","text":""},{"location":"getting-started/quick-start/#savant-responses","title":"Savant Responses","text":"<p>Savants provide:</p> <ul> <li>High-level architecture decisions</li> <li>Technology comparisons and recommendations</li> <li>Integration guidance</li> <li>When to use which specialist</li> <li>Best practices for the ecosystem</li> </ul> <p>Example response structure:</p> <pre><code>## Architecture Recommendation\n\n### Technology Stack\n- Next.js 15 with App Router\n- PostgreSQL with Prisma\n- NextAuth.js for authentication\n- tRPC for API layer\n\n### Reasoning\n[Detailed explanation of why each technology was chosen]\n\n### Implementation Plan\n1. Database schema design\n2. Authentication setup\n3. API layer creation\n4. Frontend implementation\n\n### Delegation Strategy\n- Use database specialist for Prisma schema\n- Use backend-api for tRPC routers\n- Use frontend-ui for components\n</code></pre>"},{"location":"getting-started/quick-start/#specialist-responses","title":"Specialist Responses","text":"<p>Specialists provide:</p> <ul> <li>Detailed implementation code</li> <li>Framework-specific patterns</li> <li>Configuration files</li> <li>Testing examples</li> <li>Best practices for their domain</li> </ul> <p>Example response structure:</p> <pre><code>## Implementation\n\n### Code\n[Complete, production-ready code]\n\n### Explanation\n[How the code works]\n\n### Best Practices\n[Domain-specific best practices]\n\n### Testing\n[How to test this implementation]\n\n### Next Steps\n[What to do after implementation]\n</code></pre>"},{"location":"getting-started/quick-start/#workflow-command-responses","title":"Workflow Command Responses","text":"<p>Workflow commands provide:</p> <ul> <li>Step-by-step checklists</li> <li>Guided questions</li> <li>Code examples</li> <li>Links to relevant documentation</li> <li>Next phase recommendations</li> </ul>"},{"location":"getting-started/quick-start/#tips-for-effective-usage","title":"Tips for Effective Usage","text":""},{"location":"getting-started/quick-start/#1-be-specific","title":"1. Be Specific","text":"<p>Good: <pre><code>Use frontend-ui to create a multi-step form with validation using react-hook-form and Zod\n</code></pre></p> <p>Not as good: <pre><code>Use frontend-ui to create a form\n</code></pre></p>"},{"location":"getting-started/quick-start/#2-provide-context","title":"2. Provide Context","text":"<p>Good: <pre><code>Use backend-api to add authentication to the posts API. Users should only be able to edit their own posts.\n</code></pre></p> <p>Not as good: <pre><code>Use backend-api to add authentication\n</code></pre></p>"},{"location":"getting-started/quick-start/#3-chain-agents-for-complex-tasks","title":"3. Chain Agents for Complex Tasks","text":"<pre><code># First, design\nUse architect to design a scalable notification system\n\n# Then, implement\nUse backend-api to implement the notification API\nUse frontend-ui to create notification UI components\nUse database to design notification storage\n\n# Finally, ensure quality\nUse code-reviewer to review the implementation\nUse qa-tester to write comprehensive tests\n</code></pre>"},{"location":"getting-started/quick-start/#4-use-workflow-commands-for-learning","title":"4. Use Workflow Commands for Learning","text":"<p>If you're new to a pattern or technology, use workflow commands:</p> <pre><code>/mcp-implement-fullstack  # Provides step-by-step guidance\n</code></pre> <p>If you're experienced, use direct agent invocation:</p> <pre><code>Use fullstack-nextjs to build the feature  # Faster for experts\n</code></pre>"},{"location":"getting-started/quick-start/#5-review-proactively","title":"5. Review Proactively","text":"<p>Don't wait until the end to review:</p> <pre><code># After each major feature\n/mcp-review-code\n/mcp-review-security\n\n# Before deployment\n/mcp-review-performance\n/mcp-deploy\n</code></pre>"},{"location":"getting-started/quick-start/#common-commands-reference","title":"Common Commands Reference","text":""},{"location":"getting-started/quick-start/#design-commands","title":"Design Commands","text":"<pre><code>/mcp-design-architecture    # General system architecture\n/mcp-design-nextjs         # Next.js specific design\n</code></pre>"},{"location":"getting-started/quick-start/#implementation-commands","title":"Implementation Commands","text":"<pre><code>/mcp-implement-fullstack   # Complete feature end-to-end\n/mcp-implement-frontend    # UI components and client features\n/mcp-implement-backend     # API and business logic\n</code></pre>"},{"location":"getting-started/quick-start/#review-commands","title":"Review Commands","text":"<pre><code>/mcp-review-code           # Code quality review\n/mcp-review-security       # Security audit\n/mcp-review-performance    # Performance optimization\n</code></pre>"},{"location":"getting-started/quick-start/#qa-and-deployment","title":"QA and Deployment","text":"<pre><code>/mcp-qa-e2e               # End-to-end testing\n/mcp-write-docs           # Technical documentation\n/mcp-deploy               # Production deployment\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ol> <li>Learn about the architecture</li> <li>Explore workflow commands in detail</li> <li>Read best practices</li> <li>View real-world workflows</li> <li>Explore individual agents</li> </ol>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ - Common questions</li> <li>Best Practices - Effective patterns</li> <li>GitHub Issues - Report problems</li> </ul>"},{"location":"guides/best-practices/","title":"Best Practices","text":"<p>This guide provides best practices for using MCP Sub-Agents effectively to build high-quality, production-ready applications.</p>"},{"location":"guides/best-practices/#agent-selection","title":"Agent Selection","text":""},{"location":"guides/best-practices/#choosing-the-right-agent","title":"Choosing the Right Agent","text":""},{"location":"guides/best-practices/#use-savants-for","title":"Use Savants For:","text":"<ul> <li>Architecture decisions and system design</li> <li>Technology stack selection</li> <li>Complex cross-cutting problems</li> <li>Full-stack feature coordination</li> <li>Making tradeoffs between options</li> <li>Learning about entire ecosystems</li> </ul> <p>Example: <pre><code># Good savant usage\nUse fullstack-js-savant to design an e-commerce platform architecture\n\n# Not ideal for savant\nUse fullstack-js-savant to create a button component\n</code></pre></p>"},{"location":"guides/best-practices/#use-specialists-for","title":"Use Specialists For:","text":"<ul> <li>Framework-specific implementation</li> <li>Detailed code generation</li> <li>UI component development</li> <li>API endpoint creation</li> <li>Domain-specific optimization</li> <li>Focused tasks with clear scope</li> </ul> <p>Example: <pre><code># Good specialist usage\nUse frontend-ui to create a product card component with shadcn/ui\n\n# Better handled by savant\nUse frontend-ui to design entire application architecture\n</code></pre></p>"},{"location":"guides/best-practices/#agent-chaining","title":"Agent Chaining","text":"<p>Chain agents for complex tasks:</p> <pre><code># 1. Architecture\nUse architect to design system architecture\n\n# 2. Database\nUse database to create Prisma schema\n\n# 3. API\nUse backend-api to implement tRPC routers\n\n# 4. UI\nUse frontend-ui to create components\n\n# 5. Review\nUse code-reviewer to review implementation\n</code></pre>"},{"location":"guides/best-practices/#communication-with-agents","title":"Communication with Agents","text":""},{"location":"guides/best-practices/#be-specific","title":"Be Specific","text":"<p>Provide detailed context and requirements:</p> <pre><code># Good - specific and detailed\nUse frontend-ui to create a multi-step checkout form with steps for shipping, payment, and confirmation. Include Zod validation, progress indicator, and ability to navigate between steps.\n\n# Less effective - vague\nUse frontend-ui to create a form\n</code></pre>"},{"location":"guides/best-practices/#provide-context","title":"Provide Context","text":"<p>Include relevant information:</p> <pre><code># Good - includes context\nUse backend-api to create a posts API. Users should only be able to edit their own posts. Include pagination with cursor-based approach for infinite scroll.\n\n# Less effective - missing context\nUse backend-api to create a posts API\n</code></pre>"},{"location":"guides/best-practices/#ask-for-explanations","title":"Ask for Explanations","text":"<p>Request explanations for learning:</p> <pre><code>Use fullstack-nextjs to explain when to use Server Components vs Client Components with examples\n</code></pre>"},{"location":"guides/best-practices/#request-best-practices","title":"Request Best Practices","text":"<p>Ask about recommended approaches:</p> <pre><code>Use security to explain OWASP Top 10 vulnerabilities and prevention strategies for Next.js applications\n</code></pre>"},{"location":"guides/best-practices/#workflow-commands","title":"Workflow Commands","text":""},{"location":"guides/best-practices/#when-to-use-workflow-commands","title":"When to Use Workflow Commands","text":"<p>Use workflow commands when:</p> <ul> <li>Learning - New to a pattern or technology</li> <li>Completeness - Want comprehensive checklists</li> <li>Structure - Need step-by-step guidance</li> <li>Quality - Ensuring nothing is missed</li> <li>Onboarding - Training new team members</li> </ul>"},{"location":"guides/best-practices/#when-to-use-direct-invocation","title":"When to Use Direct Invocation","text":"<p>Use direct agent invocation when:</p> <ul> <li>Speed - Quick, specific tasks</li> <li>Experience - Familiar with the workflow</li> <li>Precision - Know exactly what's needed</li> <li>Iteration - Small fixes or changes</li> </ul>"},{"location":"guides/best-practices/#effective-command-sequencing","title":"Effective Command Sequencing","text":"<p>Follow logical progression:</p> <pre><code># Recommended sequence\n/mcp-design-nextjs          # 1. Design\n/mcp-implement-fullstack    # 2. Implement\n/mcp-review-code           # 3. Review\n/mcp-review-security       # 4. Security\n/mcp-qa-e2e               # 5. Test\n/mcp-deploy               # 6. Deploy\n</code></pre> <p>Avoid skipping design:</p> <pre><code># Avoid this\n/mcp-implement-fullstack    # Implementing without design\n/mcp-design-nextjs         # Design should come first\n</code></pre>"},{"location":"guides/best-practices/#code-quality","title":"Code Quality","text":""},{"location":"guides/best-practices/#review-proactively","title":"Review Proactively","text":"<p>Review code regularly, not just at the end:</p> <pre><code># After each feature\n/mcp-implement-fullstack\n/mcp-review-code\n\n# Not just at the end\n# ... multiple features ...\n/mcp-review-code  # Too late\n</code></pre>"},{"location":"guides/best-practices/#multi-aspect-review","title":"Multi-Aspect Review","text":"<p>Use multiple review specialists:</p> <pre><code>/mcp-review-code          # Code quality\n/mcp-review-security     # Security\n/mcp-review-performance  # Performance\n</code></pre>"},{"location":"guides/best-practices/#iterate-on-feedback","title":"Iterate on Feedback","text":"<p>Address issues and re-review:</p> <pre><code>/mcp-review-code                 # Review\nUse code-reviewer to fix issues  # Address feedback\n/mcp-review-code                # Verify fixes\n</code></pre>"},{"location":"guides/best-practices/#testing","title":"Testing","text":""},{"location":"guides/best-practices/#test-as-you-build","title":"Test as You Build","text":"<p>Write tests alongside implementation:</p> <pre><code>/mcp-implement-fullstack   # Build feature\n/mcp-qa-e2e               # Write tests immediately\n</code></pre>"},{"location":"guides/best-practices/#comprehensive-test-coverage","title":"Comprehensive Test Coverage","text":"<p>Cover multiple testing layers:</p> <pre><code># Unit tests\nUse qa-tester to write Vitest unit tests for utility functions\n\n# Integration tests\nUse qa-tester to write integration tests for API routes\n\n# E2E tests\n/mcp-qa-e2e\n</code></pre>"},{"location":"guides/best-practices/#test-critical-paths","title":"Test Critical Paths","text":"<p>Focus on high-value test coverage:</p> <ul> <li>Authentication flows</li> <li>Payment processing</li> <li>Data mutations</li> <li>User workflows</li> <li>Error handling</li> </ul>"},{"location":"guides/best-practices/#performance","title":"Performance","text":""},{"location":"guides/best-practices/#optimize-early","title":"Optimize Early","text":"<p>Consider performance from the start:</p> <pre><code># During design\n/mcp-design-nextjs\n# Ask about performance considerations\n\n# During implementation\nUse fullstack-nextjs with focus on Core Web Vitals optimization\n</code></pre>"},{"location":"guides/best-practices/#regular-performance-checks","title":"Regular Performance Checks","text":"<p>Monitor performance continuously:</p> <pre><code># Weekly or bi-weekly\n/mcp-review-performance\n</code></pre>"},{"location":"guides/best-practices/#measure-before-optimizing","title":"Measure Before Optimizing","text":"<p>Always audit before optimizing:</p> <pre><code># Good approach\n/mcp-review-performance     # Identify issues\nUse performance to fix      # Address specific problems\n/mcp-review-performance    # Verify improvements\n\n# Avoid premature optimization\nUse performance to optimize  # Without measuring first\n</code></pre>"},{"location":"guides/best-practices/#security","title":"Security","text":""},{"location":"guides/best-practices/#security-first","title":"Security First","text":"<p>Consider security from day one:</p> <pre><code># Early in development\n/mcp-review-security\n</code></pre>"},{"location":"guides/best-practices/#regular-security-audits","title":"Regular Security Audits","text":"<p>Schedule regular security reviews:</p> <pre><code># Monthly security audits\n/mcp-review-security\n</code></pre>"},{"location":"guides/best-practices/#defense-in-depth","title":"Defense in Depth","text":"<p>Apply security at multiple layers:</p> <ul> <li>Input validation (client and server)</li> <li>Authentication and authorization</li> <li>Data encryption</li> <li>Security headers</li> <li>Rate limiting</li> <li>Audit logging</li> </ul>"},{"location":"guides/best-practices/#documentation","title":"Documentation","text":""},{"location":"guides/best-practices/#document-as-you-build","title":"Document as You Build","text":"<p>Create documentation alongside code:</p> <pre><code>/mcp-implement-fullstack   # Build feature\n/mcp-write-docs           # Document it\n</code></pre>"},{"location":"guides/best-practices/#comprehensive-documentation","title":"Comprehensive Documentation","text":"<p>Cover all aspects:</p> <ul> <li>README with quick start</li> <li>API reference</li> <li>Architecture documentation</li> <li>User guides</li> <li>Deployment instructions</li> </ul>"},{"location":"guides/best-practices/#keep-documentation-updated","title":"Keep Documentation Updated","text":"<p>Update docs when code changes:</p> <pre><code># After significant changes\nUse tech-writer to update documentation for new API endpoints\n</code></pre>"},{"location":"guides/best-practices/#deployment","title":"Deployment","text":""},{"location":"guides/best-practices/#automate-early","title":"Automate Early","text":"<p>Set up CI/CD from the start:</p> <pre><code># Early in project\n/mcp-deploy\n</code></pre>"},{"location":"guides/best-practices/#multiple-environments","title":"Multiple Environments","text":"<p>Use staging before production:</p> <pre><code>Use deployment to set up staging and production environments with GitHub Actions\n</code></pre>"},{"location":"guides/best-practices/#deployment-checklist","title":"Deployment Checklist","text":"<p>Always use pre-deployment checklist:</p> <ul> <li>Code review complete</li> <li>Security audit passed</li> <li>Performance verified</li> <li>Tests passing</li> <li>Documentation updated</li> <li>Database migrations ready</li> <li>Monitoring configured</li> </ul>"},{"location":"guides/best-practices/#project-organization","title":"Project Organization","text":""},{"location":"guides/best-practices/#consistent-structure","title":"Consistent Structure","text":"<p>Use consistent project structure:</p> <pre><code>app/\n\u251c\u2500\u2500 (auth)/\n\u251c\u2500\u2500 (dashboard)/\n\u251c\u2500\u2500 api/\n\u251c\u2500\u2500 actions/\ncomponents/\n\u251c\u2500\u2500 ui/\n\u251c\u2500\u2500 forms/\nlib/\n\u251c\u2500\u2500 db.ts\n\u251c\u2500\u2500 auth.ts\n</code></pre>"},{"location":"guides/best-practices/#type-safety","title":"Type Safety","text":"<p>Maximize type safety:</p> <ul> <li>Use TypeScript strict mode</li> <li>Zod for runtime validation</li> <li>tRPC for type-safe APIs</li> <li>Prisma for type-safe database</li> </ul>"},{"location":"guides/best-practices/#separation-of-concerns","title":"Separation of Concerns","text":"<p>Keep concerns separated:</p> <ul> <li>Server Components for data fetching</li> <li>Client Components for interactivity</li> <li>Server Actions for mutations</li> <li>Route Handlers for external APIs</li> </ul>"},{"location":"guides/best-practices/#team-collaboration","title":"Team Collaboration","text":""},{"location":"guides/best-practices/#shared-agent-usage","title":"Shared Agent Usage","text":"<p>Use project-specific installation:</p> <pre><code># In project .claude directory\nmkdir -p .claude/agents .claude/commands\ncp -r agents/* .claude/agents/\n</code></pre>"},{"location":"guides/best-practices/#consistent-patterns","title":"Consistent Patterns","text":"<p>Use workflow commands for consistency:</p> <pre><code># Team uses same workflows\n/mcp-implement-fullstack\n/mcp-review-code\n</code></pre>"},{"location":"guides/best-practices/#code-review-with-agents","title":"Code Review with Agents","text":"<p>Use code-reviewer before human review:</p> <pre><code># Automated pre-review\n/mcp-review-code\n# Then human review\n</code></pre>"},{"location":"guides/best-practices/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"guides/best-practices/#learn-from-reviews","title":"Learn from Reviews","text":"<p>Study agent feedback to improve:</p> <pre><code>Use code-reviewer to review my implementation\n# Read feedback carefully\n# Understand recommendations\n# Apply learnings to future code\n</code></pre>"},{"location":"guides/best-practices/#regular-audits","title":"Regular Audits","text":"<p>Schedule regular comprehensive audits:</p> <pre><code># Monthly comprehensive review\n/mcp-review-code\n/mcp-review-security\n/mcp-review-performance\n</code></pre>"},{"location":"guides/best-practices/#stay-updated","title":"Stay Updated","text":"<p>Keep agents and practices current:</p> <pre><code># Regular updates\ncd ~/mcp-sub-agents\ngit pull\n</code></pre>"},{"location":"guides/best-practices/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":""},{"location":"guides/best-practices/#dont-skip-design","title":"Don't Skip Design","text":"<pre><code># Avoid\n/mcp-implement-fullstack  # Without design\n\n# Better\n/mcp-design-nextjs\n/mcp-implement-fullstack\n</code></pre>"},{"location":"guides/best-practices/#dont-ignore-security","title":"Don't Ignore Security","text":"<pre><code># Avoid\n# ... build entire app ...\n/mcp-review-security  # Too late\n\n# Better\n/mcp-review-security  # Regular audits during development\n</code></pre>"},{"location":"guides/best-practices/#dont-skip-testing","title":"Don't Skip Testing","text":"<pre><code># Avoid\n/mcp-implement-fullstack\n# Move to next feature without tests\n\n# Better\n/mcp-implement-fullstack\n/mcp-qa-e2e\n</code></pre>"},{"location":"guides/best-practices/#dont-optimize-prematurely","title":"Don't Optimize Prematurely","text":"<pre><code># Avoid\nUse performance to optimize  # Without measuring\n\n# Better\n/mcp-review-performance  # Measure first\nUse performance to fix issues  # Then optimize\n</code></pre>"},{"location":"guides/best-practices/#summary","title":"Summary","text":"<p>Key best practices:</p> <ol> <li>Choose the right agent - Savants for architecture, specialists for implementation</li> <li>Be specific - Provide detailed context and requirements</li> <li>Review proactively - Regular code, security, and performance reviews</li> <li>Test continuously - Write tests as you build</li> <li>Document thoroughly - Keep documentation updated</li> <li>Automate deployment - CI/CD from the start</li> <li>Prioritize security - Security-first approach</li> <li>Optimize wisely - Measure before optimizing</li> </ol>"},{"location":"guides/best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>View workflow examples</li> <li>Learn about agents</li> <li>Explore workflow commands</li> <li>Read FAQ</li> </ul>"},{"location":"guides/workflows/","title":"Workflow Examples","text":"<p>This guide provides real-world workflow examples showing how to use MCP Sub-Agents effectively for common development tasks.</p>"},{"location":"guides/workflows/#building-a-blog-feature","title":"Building a Blog Feature","text":"<p>Complete end-to-end blog feature with posts, comments, and likes.</p>"},{"location":"guides/workflows/#step-1-design-architecture","title":"Step 1: Design Architecture","text":"<pre><code>/mcp-design-nextjs\n</code></pre> <p>Questions to answer:</p> <ul> <li>Where will blog routes live? (<code>/blog</code>, <code>/blog/[slug]</code>, <code>/blog/new</code>)</li> <li>Server or Client Components for each page?</li> <li>tRPC or Route Handlers for API?</li> <li>How to handle authentication?</li> </ul> <p>Output:</p> <ul> <li>Route structure plan</li> <li>Component hierarchy</li> <li>Data flow diagrams</li> <li>API design</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-2-create-database-schema","title":"Step 2: Create Database Schema","text":"<pre><code>Use database to create a blog schema with Post, Comment, and Like models related to User\n</code></pre> <p>Implementation:</p> <pre><code>model Post {\n  id        String    @id @default(cuid())\n  title     String\n  slug      String    @unique\n  content   String    @db.Text\n  excerpt   String?\n  published Boolean   @default(false)\n  authorId  String\n  author    User      @relation(fields: [authorId], references: [id])\n  comments  Comment[]\n  likes     Like[]\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  @@index([authorId])\n  @@index([published])\n  @@index([createdAt])\n}\n</code></pre> <p>Time: 15-20 minutes</p>"},{"location":"guides/workflows/#step-3-implement-backend-api","title":"Step 3: Implement Backend API","text":"<pre><code>Use backend-api to create a tRPC router for blog posts with CRUD operations and authorization\n</code></pre> <p>Features:</p> <ul> <li>List posts (public)</li> <li>Get post by slug (public)</li> <li>Create post (authenticated)</li> <li>Update post (owner only)</li> <li>Delete post (owner only)</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#step-4-build-server-components","title":"Step 4: Build Server Components","text":"<pre><code>Use fullstack-nextjs to create blog listing and detail pages with Server Components\n</code></pre> <p>Pages:</p> <ul> <li><code>/blog</code> - List all published posts</li> <li><code>/blog/[slug]</code> - Single post view</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-5-create-ui-components","title":"Step 5: Create UI Components","text":"<pre><code>Use frontend-ui to create blog post forms and comment sections with shadcn/ui\n</code></pre> <p>Components:</p> <ul> <li>Create post form with rich text editor</li> <li>Comment submission form</li> <li>Like button with optimistic updates</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#step-6-review-and-test","title":"Step 6: Review and Test","text":"<pre><code>/mcp-review-code\n/mcp-review-security\n/mcp-qa-e2e\n</code></pre> <p>Reviews:</p> <ul> <li>Code quality check</li> <li>Security audit (input validation, authorization)</li> <li>E2E tests for critical flows</li> </ul> <p>Time: 45-60 minutes</p>"},{"location":"guides/workflows/#total-time-3-4-hours","title":"Total Time: 3-4 hours","text":""},{"location":"guides/workflows/#adding-authentication","title":"Adding Authentication","text":"<p>Implement complete authentication system with email/password and OAuth.</p>"},{"location":"guides/workflows/#step-1-design-authentication-flow","title":"Step 1: Design Authentication Flow","text":"<pre><code>Use fullstack-js-savant to design authentication with NextAuth.js supporting email/password and GitHub OAuth\n</code></pre> <p>Decisions:</p> <ul> <li>NextAuth.js v5 configuration</li> <li>Session vs JWT strategy</li> <li>Protected route middleware</li> <li>OAuth provider setup</li> </ul> <p>Time: 15-20 minutes</p>"},{"location":"guides/workflows/#step-2-implement-nextauthjs","title":"Step 2: Implement NextAuth.js","text":"<pre><code>Use backend-api to implement NextAuth.js with email credentials and GitHub OAuth provider\n</code></pre> <p>Configuration:</p> <ul> <li>Auth.js v5 setup</li> <li>Prisma adapter</li> <li>Email provider</li> <li>GitHub OAuth</li> <li>Protected API routes</li> </ul> <p>Time: 30-40 minutes</p>"},{"location":"guides/workflows/#step-3-build-auth-ui","title":"Step 3: Build Auth UI","text":"<pre><code>Use frontend-ui to create login, signup, and profile pages with shadcn/ui\n</code></pre> <p>Pages:</p> <ul> <li>Login form</li> <li>Signup form</li> <li>Password reset</li> <li>User profile</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#step-4-add-protected-routes","title":"Step 4: Add Protected Routes","text":"<pre><code>Use fullstack-nextjs to implement middleware for protecting routes and pages\n</code></pre> <p>Implementation:</p> <ul> <li>Middleware configuration</li> <li>Redirect logic</li> <li>Session handling</li> </ul> <p>Time: 15-20 minutes</p>"},{"location":"guides/workflows/#step-5-security-review","title":"Step 5: Security Review","text":"<pre><code>/mcp-review-security\n</code></pre> <p>Focus areas:</p> <ul> <li>Password hashing</li> <li>CSRF protection</li> <li>Session management</li> <li>OAuth implementation</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#total-time-2-3-hours","title":"Total Time: 2-3 hours","text":""},{"location":"guides/workflows/#performance-optimization","title":"Performance Optimization","text":"<p>Optimize an existing application for better Core Web Vitals.</p>"},{"location":"guides/workflows/#step-1-performance-audit","title":"Step 1: Performance Audit","text":"<pre><code>/mcp-review-performance\n</code></pre> <p>Analysis:</p> <ul> <li>Core Web Vitals scores</li> <li>Bundle size analysis</li> <li>Database query performance</li> <li>Caching effectiveness</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-2-optimize-frontend","title":"Step 2: Optimize Frontend","text":"<pre><code>Use fullstack-nextjs to implement Suspense, streaming, and code splitting for better LCP and FID\n</code></pre> <p>Optimizations:</p> <ul> <li>Streaming with Suspense</li> <li>Dynamic imports</li> <li>Image optimization</li> <li>Font optimization</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#step-3-optimize-database","title":"Step 3: Optimize Database","text":"<pre><code>Use database to add indexes and optimize slow queries\n</code></pre> <p>Improvements:</p> <ul> <li>Add missing indexes</li> <li>Optimize N+1 queries</li> <li>Implement connection pooling</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-4-implement-caching","title":"Step 4: Implement Caching","text":"<pre><code>Use performance to implement multi-layer caching strategy with Redis\n</code></pre> <p>Caching layers:</p> <ul> <li>Browser caching</li> <li>CDN caching</li> <li>Server-side caching</li> <li>Database query caching</li> </ul> <p>Time: 30-40 minutes</p>"},{"location":"guides/workflows/#step-5-verify-improvements","title":"Step 5: Verify Improvements","text":"<pre><code>/mcp-review-performance\n</code></pre> <p>Verification:</p> <ul> <li>Re-check Core Web Vitals</li> <li>Confirm improvements</li> <li>Identify remaining issues</li> </ul> <p>Time: 15-20 minutes</p>"},{"location":"guides/workflows/#total-time-2-3-hours_1","title":"Total Time: 2-3 hours","text":""},{"location":"guides/workflows/#setting-up-cicd","title":"Setting Up CI/CD","text":"<p>Complete CI/CD pipeline from scratch.</p>"},{"location":"guides/workflows/#step-1-plan-deployment-strategy","title":"Step 1: Plan Deployment Strategy","text":"<pre><code>/mcp-deploy\n</code></pre> <p>Planning:</p> <ul> <li>Deployment platform (Vercel/Docker)</li> <li>Environment management</li> <li>Database migration strategy</li> <li>Rollback procedures</li> </ul> <p>Time: 15-20 minutes</p>"},{"location":"guides/workflows/#step-2-configure-deployment","title":"Step 2: Configure Deployment","text":"<p>For Vercel:</p> <pre><code>Use deployment to configure Vercel deployment with environment variables and custom domains\n</code></pre> <p>For Docker:</p> <pre><code>Use deployment to create Dockerfile and docker-compose.yml for production deployment\n</code></pre> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-3-create-cicd-pipeline","title":"Step 3: Create CI/CD Pipeline","text":"<pre><code>Use deployment to create GitHub Actions workflow for testing, building, and deploying\n</code></pre> <p>Pipeline stages:</p> <ul> <li>Lint and type check</li> <li>Run tests</li> <li>Build application</li> <li>Deploy to staging</li> <li>Deploy to production</li> </ul> <p>Time: 30-40 minutes</p>"},{"location":"guides/workflows/#step-4-set-up-monitoring","title":"Step 4: Set Up Monitoring","text":"<pre><code>Use monitoring to configure Sentry for error tracking and set up health checks\n</code></pre> <p>Monitoring:</p> <ul> <li>Error tracking</li> <li>Performance monitoring</li> <li>Uptime checks</li> <li>Alerting</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#total-time-15-2-hours","title":"Total Time: 1.5-2 hours","text":""},{"location":"guides/workflows/#building-a-real-time-chat","title":"Building a Real-Time Chat","text":"<p>Complex feature with WebSockets and real-time updates.</p>"},{"location":"guides/workflows/#step-1-architecture-design","title":"Step 1: Architecture Design","text":"<pre><code>Use fullstack-js-savant to design a real-time chat system with WebSockets, message persistence, and typing indicators\n</code></pre> <p>Architecture:</p> <ul> <li>WebSocket server (Socket.io)</li> <li>Message storage (PostgreSQL)</li> <li>Real-time presence (Redis)</li> <li>Client synchronization</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#step-2-database-schema","title":"Step 2: Database Schema","text":"<pre><code>Use database to create schema for chat rooms, messages, and participants\n</code></pre> <p>Models:</p> <ul> <li>Room</li> <li>Message</li> <li>Participant</li> <li>TypingIndicator</li> </ul> <p>Time: 20-30 minutes</p>"},{"location":"guides/workflows/#step-3-websocket-server","title":"Step 3: WebSocket Server","text":"<pre><code>Use backend-api to implement Socket.io server with authentication and room management\n</code></pre> <p>Features:</p> <ul> <li>Socket authentication</li> <li>Room join/leave</li> <li>Message broadcasting</li> <li>Typing indicators</li> <li>Online presence</li> </ul> <p>Time: 45-60 minutes</p>"},{"location":"guides/workflows/#step-4-chat-ui","title":"Step 4: Chat UI","text":"<pre><code>Use frontend-ui to create chat interface with message list, input, and real-time updates\n</code></pre> <p>Components:</p> <ul> <li>Room list</li> <li>Message thread</li> <li>Message input</li> <li>Typing indicator</li> <li>Online status</li> </ul> <p>Time: 45-60 minutes</p>"},{"location":"guides/workflows/#step-5-testing-and-review","title":"Step 5: Testing and Review","text":"<pre><code>/mcp-review-code\n/mcp-qa-e2e\n</code></pre> <p>Testing:</p> <ul> <li>E2E tests for chat flows</li> <li>Connection handling</li> <li>Message delivery</li> <li>Error scenarios</li> </ul> <p>Time: 30-45 minutes</p>"},{"location":"guides/workflows/#total-time-3-4-hours_1","title":"Total Time: 3-4 hours","text":""},{"location":"guides/workflows/#best-practices","title":"Best Practices","text":""},{"location":"guides/workflows/#1-start-with-design","title":"1. Start with Design","text":"<p>Always begin with architecture or design commands:</p> <pre><code># Good workflow\n/mcp-design-nextjs\n/mcp-implement-fullstack\n\n# Avoid starting with implementation\n/mcp-implement-fullstack  # Without design first\n</code></pre>"},{"location":"guides/workflows/#2-review-frequently","title":"2. Review Frequently","text":"<p>Review after each major implementation:</p> <pre><code>/mcp-implement-fullstack\n/mcp-review-code        # Immediate review\n/mcp-review-security   # Before moving on\n</code></pre>"},{"location":"guides/workflows/#3-iterate-on-feedback","title":"3. Iterate on Feedback","text":"<p>Use review feedback to improve:</p> <pre><code>/mcp-review-code                    # First review\nUse code-reviewer to fix issues     # Address problems\n/mcp-review-code                    # Verify fixes\n</code></pre>"},{"location":"guides/workflows/#4-combine-commands-and-direct-invocation","title":"4. Combine Commands and Direct Invocation","text":"<p>Mix workflow commands with direct agent calls:</p> <pre><code>/mcp-implement-fullstack           # Structured implementation\nUse performance to optimize query  # Quick optimization\n/mcp-review-code                  # Final review\n</code></pre>"},{"location":"guides/workflows/#5-document-as-you-build","title":"5. Document as You Build","text":"<p>Create documentation alongside development:</p> <pre><code>/mcp-implement-fullstack  # Build feature\n/mcp-write-docs          # Document it\n</code></pre>"},{"location":"guides/workflows/#summary","title":"Summary","text":"<p>Effective workflows:</p> <ul> <li>Start with design - Plan before building</li> <li>Implement incrementally - Build in stages</li> <li>Review frequently - Catch issues early</li> <li>Test thoroughly - Ensure quality</li> <li>Document continuously - Keep docs updated</li> </ul>"},{"location":"guides/workflows/#next-steps","title":"Next Steps","text":"<ul> <li>Best Practices Guide</li> <li>Architecture Overview</li> <li>Workflow Commands Reference</li> </ul>"},{"location":"reference/tech-stack/","title":"Technology Stack Reference","text":"<p>Complete reference of technologies covered by MCP Sub-Agents with version information and expertise areas.</p>"},{"location":"reference/tech-stack/#frontend-technologies","title":"Frontend Technologies","text":""},{"location":"reference/tech-stack/#frameworks","title":"Frameworks","text":""},{"location":"reference/tech-stack/#react","title":"React","text":"<p>Versions: React 18+</p> <p>Expertise:</p> <ul> <li>Hooks - useState, useEffect, useReducer, useContext, custom hooks</li> <li>Server Components - RSC architecture, server-first rendering</li> <li>Suspense - Loading states, streaming, concurrent features</li> <li>Error Boundaries - Error handling, fallback UI</li> <li>Context - State management, prop drilling prevention</li> <li>Portals - Modal dialogs, tooltips</li> <li>Refs - DOM manipulation, component instances</li> </ul> <p>Agents: fullstack-nextjs, frontend-ui, fullstack-js-savant</p>"},{"location":"reference/tech-stack/#nextjs","title":"Next.js","text":"<p>Versions: Next.js 15+</p> <p>Expertise:</p> <ul> <li>App Router - File-based routing, layouts, route groups</li> <li>Server Components - Default server-side rendering</li> <li>Client Components - Interactive UI with 'use client'</li> <li>Server Actions - Form handling, mutations, 'use server'</li> <li>Streaming - Progressive rendering, Suspense integration</li> <li>Metadata - Static and dynamic SEO metadata</li> <li>Image Optimization - next/image, automatic optimization</li> <li>Font Optimization - next/font, Google Fonts</li> <li>Route Handlers - API endpoints, REST APIs</li> <li>Middleware - Authentication, rate limiting, redirects</li> <li>Edge Runtime - Edge functions, global distribution</li> </ul> <p>Agents: fullstack-nextjs, fullstack-js-savant</p>"},{"location":"reference/tech-stack/#ui-libraries","title":"UI Libraries","text":""},{"location":"reference/tech-stack/#shadcnui","title":"shadcn/ui","text":"<p>Expertise:</p> <ul> <li>Component installation and customization</li> <li>Radix UI primitives integration</li> <li>Tailwind CSS styling</li> <li>Accessibility features</li> <li>Dark mode support</li> <li>Theme customization</li> </ul> <p>Components:</p> <ul> <li>Forms (Input, Textarea, Select, Checkbox, Radio)</li> <li>Data display (Table, Card, Badge, Avatar)</li> <li>Feedback (Alert, Toast, Dialog, Popover)</li> <li>Navigation (Tabs, Dropdown Menu, Command)</li> <li>Layout (Sheet, Separator, Aspect Ratio)</li> </ul> <p>Agents: frontend-ui, fullstack-nextjs</p>"},{"location":"reference/tech-stack/#tailwind-css","title":"Tailwind CSS","text":"<p>Versions: Tailwind CSS 3.x</p> <p>Expertise:</p> <ul> <li>Utility-first CSS</li> <li>Responsive design (mobile-first)</li> <li>Custom themes</li> <li>Dark mode</li> <li>JIT compiler</li> <li>Plugin system</li> <li>Custom utilities</li> </ul> <p>Agents: frontend-ui, fullstack-nextjs</p>"},{"location":"reference/tech-stack/#radix-ui","title":"Radix UI","text":"<p>Expertise:</p> <ul> <li>Accessible primitives</li> <li>Unstyled components</li> <li>Keyboard navigation</li> <li>ARIA attributes</li> <li>Focus management</li> <li>Screen reader support</li> </ul> <p>Agents: frontend-ui</p>"},{"location":"reference/tech-stack/#forms-validation","title":"Forms &amp; Validation","text":""},{"location":"reference/tech-stack/#react-hook-form","title":"React Hook Form","text":"<p>Versions: 7.x</p> <p>Expertise:</p> <ul> <li>Form state management</li> <li>Validation</li> <li>Error handling</li> <li>Field arrays</li> <li>Controlled/uncontrolled inputs</li> <li>TypeScript integration</li> </ul> <p>Agents: frontend-ui</p>"},{"location":"reference/tech-stack/#zod","title":"Zod","text":"<p>Versions: 3.x</p> <p>Expertise:</p> <ul> <li>Schema validation</li> <li>Type inference</li> <li>Runtime validation</li> <li>Error messages</li> <li>Transformations</li> <li>Composition</li> </ul> <p>Agents: frontend-ui, backend-api, fullstack-nextjs</p>"},{"location":"reference/tech-stack/#animation","title":"Animation","text":""},{"location":"reference/tech-stack/#framer-motion","title":"Framer Motion","text":"<p>Versions: 10.x</p> <p>Expertise:</p> <ul> <li>Component animations</li> <li>Page transitions</li> <li>Gestures</li> <li>Scroll animations</li> <li>Layout animations</li> <li>SVG animations</li> </ul> <p>Agents: frontend-ui</p>"},{"location":"reference/tech-stack/#backend-technologies","title":"Backend Technologies","text":""},{"location":"reference/tech-stack/#nodejs-frameworks","title":"Node.js Frameworks","text":""},{"location":"reference/tech-stack/#expressjs","title":"Express.js","text":"<p>Versions: 4.x</p> <p>Expertise:</p> <ul> <li>Middleware architecture</li> <li>Routing</li> <li>REST APIs</li> <li>Error handling</li> <li>Request/response handling</li> <li>Cookie parsing</li> <li>Session management</li> </ul> <p>Agents: backend-api, fullstack-js-savant</p>"},{"location":"reference/tech-stack/#nestjs","title":"NestJS","text":"<p>Versions: 10.x</p> <p>Expertise:</p> <ul> <li>Dependency injection</li> <li>Decorators</li> <li>Modules</li> <li>Controllers and services</li> <li>GraphQL integration</li> <li>Microservices</li> <li>WebSockets</li> <li>Testing</li> </ul> <p>Agents: fullstack-js-savant</p>"},{"location":"reference/tech-stack/#fastify","title":"Fastify","text":"<p>Versions: 4.x</p> <p>Expertise:</p> <ul> <li>High performance</li> <li>Schema validation</li> <li>Plugin architecture</li> <li>TypeScript support</li> <li>Async/await</li> <li>Logging</li> </ul> <p>Agents: fullstack-js-savant</p>"},{"location":"reference/tech-stack/#api-technologies","title":"API Technologies","text":""},{"location":"reference/tech-stack/#trpc","title":"tRPC","text":"<p>Versions: 10.x</p> <p>Expertise:</p> <ul> <li>End-to-end type safety</li> <li>React Query integration</li> <li>Input validation with Zod</li> <li>Middleware</li> <li>Context</li> <li>Subscriptions</li> <li>Error handling</li> </ul> <p>Agents: backend-api, fullstack-nextjs, fullstack-js-savant</p>"},{"location":"reference/tech-stack/#graphql","title":"GraphQL","text":"<p>Expertise:</p> <ul> <li>Schema definition</li> <li>Resolvers</li> <li>Apollo Server</li> <li>Subscriptions</li> <li>DataLoader</li> <li>Schema stitching</li> <li>Federation</li> </ul> <p>Agents: fullstack-js-savant</p>"},{"location":"reference/tech-stack/#authentication","title":"Authentication","text":""},{"location":"reference/tech-stack/#nextauthjs","title":"NextAuth.js","text":"<p>Versions: 5.x (Auth.js)</p> <p>Expertise:</p> <ul> <li>OAuth providers (GitHub, Google, etc.)</li> <li>Credentials provider</li> <li>Email provider</li> <li>JWT strategy</li> <li>Session strategy</li> <li>Database adapters</li> <li>Callbacks and events</li> <li>Middleware integration</li> </ul> <p>Agents: backend-api, fullstack-nextjs</p>"},{"location":"reference/tech-stack/#database-technologies","title":"Database Technologies","text":""},{"location":"reference/tech-stack/#databases","title":"Databases","text":""},{"location":"reference/tech-stack/#postgresql","title":"PostgreSQL","text":"<p>Versions: 14+</p> <p>Expertise:</p> <ul> <li>Advanced queries</li> <li>Indexing strategies</li> <li>Full-text search</li> <li>JSONB</li> <li>Partitioning</li> <li>Replication</li> <li>Extensions</li> <li>Performance tuning</li> </ul> <p>Agents: database</p>"},{"location":"reference/tech-stack/#redis","title":"Redis","text":"<p>Versions: 7.x</p> <p>Expertise:</p> <ul> <li>Caching strategies</li> <li>Pub/Sub</li> <li>Data structures</li> <li>Session storage</li> <li>Rate limiting</li> <li>Queue implementation</li> </ul> <p>Agents: database, performance</p>"},{"location":"reference/tech-stack/#orms","title":"ORMs","text":""},{"location":"reference/tech-stack/#prisma","title":"Prisma","text":"<p>Versions: 5.x</p> <p>Expertise:</p> <ul> <li>Schema design</li> <li>Migrations</li> <li>Type-safe queries</li> <li>Relations</li> <li>Transactions</li> <li>Seeding</li> <li>Query optimization</li> <li>Connection pooling</li> </ul> <p>Agents: database, fullstack-nextjs, backend-api</p>"},{"location":"reference/tech-stack/#drizzle","title":"Drizzle","text":"<p>Expertise:</p> <ul> <li>Type-safe ORM</li> <li>SQL-like syntax</li> <li>Migrations</li> <li>Relations</li> <li>TypeScript integration</li> </ul> <p>Agents: database</p>"},{"location":"reference/tech-stack/#testing-technologies","title":"Testing Technologies","text":""},{"location":"reference/tech-stack/#e2e-testing","title":"E2E Testing","text":""},{"location":"reference/tech-stack/#playwright","title":"Playwright","text":"<p>Versions: 1.40+</p> <p>Expertise:</p> <ul> <li>Cross-browser testing</li> <li>Page Object Model</li> <li>API testing</li> <li>Visual regression</li> <li>Mobile testing</li> <li>Debugging tools</li> <li>CI integration</li> <li>Parallel execution</li> </ul> <p>Agents: qa-tester</p>"},{"location":"reference/tech-stack/#unit-testing","title":"Unit Testing","text":""},{"location":"reference/tech-stack/#vitest","title":"Vitest","text":"<p>Versions: 1.x</p> <p>Expertise:</p> <ul> <li>Fast unit tests</li> <li>Jest-compatible API</li> <li>ESM support</li> <li>TypeScript support</li> <li>Coverage reporting</li> <li>Mocking</li> <li>Snapshot testing</li> </ul> <p>Agents: qa-tester</p>"},{"location":"reference/tech-stack/#testing-library","title":"Testing Library","text":"<p>Expertise:</p> <ul> <li>Component testing</li> <li>User-centric queries</li> <li>Accessibility testing</li> <li>React Testing Library</li> <li>Async utilities</li> <li>Custom matchers</li> </ul> <p>Agents: qa-tester</p>"},{"location":"reference/tech-stack/#devops-deployment","title":"DevOps &amp; Deployment","text":""},{"location":"reference/tech-stack/#platforms","title":"Platforms","text":""},{"location":"reference/tech-stack/#vercel","title":"Vercel","text":"<p>Expertise:</p> <ul> <li>Next.js deployment</li> <li>Serverless functions</li> <li>Edge functions</li> <li>Preview deployments</li> <li>Environment variables</li> <li>Custom domains</li> <li>Analytics</li> </ul> <p>Agents: deployment</p>"},{"location":"reference/tech-stack/#docker","title":"Docker","text":"<p>Expertise:</p> <ul> <li>Containerization</li> <li>Multi-stage builds</li> <li>Docker Compose</li> <li>Volume management</li> <li>Networking</li> <li>Security best practices</li> </ul> <p>Agents: deployment</p>"},{"location":"reference/tech-stack/#kubernetes","title":"Kubernetes","text":"<p>Expertise:</p> <ul> <li>Container orchestration</li> <li>Deployments</li> <li>Services</li> <li>Ingress</li> <li>ConfigMaps and Secrets</li> <li>Scaling</li> <li>Health checks</li> </ul> <p>Agents: deployment</p>"},{"location":"reference/tech-stack/#cicd","title":"CI/CD","text":""},{"location":"reference/tech-stack/#github-actions","title":"GitHub Actions","text":"<p>Expertise:</p> <ul> <li>Workflow automation</li> <li>Build pipelines</li> <li>Testing automation</li> <li>Deployment automation</li> <li>Secret management</li> <li>Matrix builds</li> <li>Caching</li> </ul> <p>Agents: deployment</p>"},{"location":"reference/tech-stack/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"reference/tech-stack/#error-tracking","title":"Error Tracking","text":""},{"location":"reference/tech-stack/#sentry","title":"Sentry","text":"<p>Expertise:</p> <ul> <li>Error tracking</li> <li>Performance monitoring</li> <li>Release tracking</li> <li>User feedback</li> <li>Source maps</li> <li>Alerts</li> <li>Integrations</li> </ul> <p>Agents: monitoring</p>"},{"location":"reference/tech-stack/#tracing","title":"Tracing","text":""},{"location":"reference/tech-stack/#opentelemetry","title":"OpenTelemetry","text":"<p>Expertise:</p> <ul> <li>Distributed tracing</li> <li>Metrics collection</li> <li>Log correlation</li> <li>Context propagation</li> <li>Instrumentation</li> </ul> <p>Agents: monitoring</p>"},{"location":"reference/tech-stack/#logging","title":"Logging","text":""},{"location":"reference/tech-stack/#pino","title":"Pino","text":"<p>Expertise:</p> <ul> <li>Structured logging</li> <li>High performance</li> <li>JSON output</li> <li>Child loggers</li> <li>Redaction</li> </ul> <p>Agents: monitoring</p>"},{"location":"reference/tech-stack/#code-quality","title":"Code Quality","text":""},{"location":"reference/tech-stack/#linting","title":"Linting","text":""},{"location":"reference/tech-stack/#eslint","title":"ESLint","text":"<p>Versions: 8.x</p> <p>Expertise:</p> <ul> <li>Code linting</li> <li>Custom rules</li> <li>Plugin configuration</li> <li>Next.js integration</li> <li>TypeScript support</li> </ul> <p>Agents: code-reviewer</p>"},{"location":"reference/tech-stack/#formatting","title":"Formatting","text":""},{"location":"reference/tech-stack/#prettier","title":"Prettier","text":"<p>Versions: 3.x</p> <p>Expertise:</p> <ul> <li>Code formatting</li> <li>Configuration</li> <li>Editor integration</li> <li>Pre-commit hooks</li> </ul> <p>Agents: code-reviewer</p>"},{"location":"reference/tech-stack/#typescript","title":"TypeScript","text":"<p>Versions: 5.x</p> <p>Expertise:</p> <ul> <li>Strict mode</li> <li>Advanced types (generics, conditionals, mapped types)</li> <li>Type guards</li> <li>Utility types</li> <li>Template literal types</li> <li>Decorators</li> <li>Module resolution</li> <li>tsconfig configuration</li> </ul> <p>Agents: All agents (TypeScript-first approach)</p>"},{"location":"reference/tech-stack/#build-tools","title":"Build Tools","text":""},{"location":"reference/tech-stack/#vite","title":"Vite","text":"<p>Versions: 5.x</p> <p>Expertise:</p> <ul> <li>Fast development server</li> <li>HMR</li> <li>Optimized builds</li> <li>Plugin system</li> <li>ESM-first</li> </ul> <p>Agents: fullstack-js-savant</p>"},{"location":"reference/tech-stack/#turbopack","title":"Turbopack","text":"<p>Expertise:</p> <ul> <li>Next.js bundler</li> <li>Incremental compilation</li> <li>Fast builds</li> <li>Development mode</li> </ul> <p>Agents: fullstack-nextjs</p>"},{"location":"reference/tech-stack/#version-requirements","title":"Version Requirements","text":"Technology Minimum Version Recommended Version Node.js 18.x 20.x LTS Next.js 15.0 Latest 15.x React 18.0 Latest 18.x TypeScript 5.0 Latest 5.x Prisma 5.0 Latest 5.x PostgreSQL 14.0 Latest 16.x Playwright 1.40 Latest 1.x Vitest 1.0 Latest 1.x"},{"location":"reference/tech-stack/#technology-selection-guidelines","title":"Technology Selection Guidelines","text":""},{"location":"reference/tech-stack/#small-projects-mvp-prototypes","title":"Small Projects (MVP, Prototypes)","text":"<ul> <li>Next.js + Vercel + Supabase</li> <li>shadcn/ui + Tailwind CSS</li> <li>NextAuth.js</li> <li>Minimal setup, fast deployment</li> </ul>"},{"location":"reference/tech-stack/#medium-projects-saas-b2b","title":"Medium Projects (SaaS, B2B)","text":"<ul> <li>Next.js + tRPC + Prisma + PostgreSQL</li> <li>shadcn/ui + Tailwind CSS</li> <li>NextAuth.js v5</li> <li>Redis for caching</li> <li>Playwright for testing</li> <li>GitHub Actions CI/CD</li> </ul>"},{"location":"reference/tech-stack/#large-projects-enterprise-high-scale","title":"Large Projects (Enterprise, High-Scale)","text":"<ul> <li>Microservices with NestJS</li> <li>Next.js frontend</li> <li>PostgreSQL with read replicas</li> <li>Redis cluster</li> <li>Kubernetes deployment</li> <li>Comprehensive monitoring</li> <li>Advanced security</li> </ul>"},{"location":"reference/tech-stack/#next-steps","title":"Next Steps","text":"<ul> <li>View agent capabilities</li> <li>Learn workflows</li> <li>Read best practices</li> </ul>"}]}